
TSL2591_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004988  08004988  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004988  08004988  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  08004a00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004a00  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be85  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f99  00000000  00000000  0002bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a77  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e304  00000000  00000000  00047e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086586  00000000  00000000  00056113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c0  00000000  00000000  000dc6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800485c 	.word	0x0800485c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800485c 	.word	0x0800485c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_f2iz>:
 8000b58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b60:	d30f      	bcc.n	8000b82 <__aeabi_f2iz+0x2a>
 8000b62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_f2iz+0x30>
 8000b6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b78:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7c:	bf18      	it	ne
 8000b7e:	4240      	negne	r0, r0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr
 8000b88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b8c:	d101      	bne.n	8000b92 <__aeabi_f2iz+0x3a>
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	d105      	bne.n	8000b9e <__aeabi_f2iz+0x46>
 8000b92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr

08000ba4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a29      	ldr	r2, [pc, #164]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|TEST_LED_Ir_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c20:	f001 fa3e 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|TEST_LED_Ir_Pin;
 8000c24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c3e:	f001 f8ab 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c58:	f001 f89e 	bl	8001d98 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40010800 	.word	0x40010800

08000c70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <MX_I2C1_Init+0x54>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x58>)
 8000c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_I2C1_Init+0x50>)
 8000cae:	f001 fa29 	bl	8002104 <HAL_I2C_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 f985 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	000186a0 	.word	0x000186a0

08000ccc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_I2C2_Init+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_I2C2_Init+0x58>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C2_Init+0x50>)
 8000d0a:	f001 f9fb 	bl	8002104 <HAL_I2C_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 f957 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000e0 	.word	0x200000e0
 8000d20:	40005800 	.word	0x40005800
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <HAL_I2C_MspInit+0xe4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d133      	bne.n	8000db0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <HAL_I2C_MspInit+0xec>)
 8000d76:	f001 f80f 	bl	8001d98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_I2C_MspInit+0xf0>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <HAL_I2C_MspInit+0xf0>)
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000dae:	e029      	b.n	8000e04 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_I2C_MspInit+0xf4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d124      	bne.n	8000e04 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <HAL_I2C_MspInit+0xec>)
 8000de8:	f000 ffd6 	bl	8001d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df6:	61d3      	str	r3, [r2, #28]
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_I2C_MspInit+0xe8>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3730      	adds	r7, #48	; 0x30
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40005800 	.word	0x40005800

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 fe4e 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f888 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f7ff feba 	bl	8000ba4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e30:	f7ff ff1e 	bl	8000c70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e34:	f7ff ff4a 	bl	8000ccc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000e38:	f000 f9c8 	bl	80011cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e3c:	f000 f9f0 	bl	8001220 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000e40:	f7ff ff44 	bl	8000ccc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*  -------------TSL2591 Sensor Init--------------------------------------------*/

  DEV_I2C_Init(&hi2c1, TSL2591_ADDRESS);
 8000e44:	2129      	movs	r1, #41	; 0x29
 8000e46:	4836      	ldr	r0, [pc, #216]	; (8000f20 <main+0x100>)
 8000e48:	f000 fade 	bl	8001408 <DEV_I2C_Init>
//  TSL2591_Init(&TSL_LuxSensor1, &hi2c1, TSL2591_ADDRESS);
  TSL2591_Init(&TSL_LuxSensor1, &hi2c1, TSL2591_ADDRESS);
 8000e4c:	2229      	movs	r2, #41	; 0x29
 8000e4e:	4934      	ldr	r1, [pc, #208]	; (8000f20 <main+0x100>)
 8000e50:	4834      	ldr	r0, [pc, #208]	; (8000f24 <main+0x104>)
 8000e52:	f000 fc33 	bl	80016bc <TSL2591_Init>

  DEV_I2C_Init(&hi2c2, TSL2591_ADDRESS);
 8000e56:	2129      	movs	r1, #41	; 0x29
 8000e58:	4833      	ldr	r0, [pc, #204]	; (8000f28 <main+0x108>)
 8000e5a:	f000 fad5 	bl	8001408 <DEV_I2C_Init>
  TSL2591_Init(&TSL_LuxSensor2, &hi2c2, TSL2591_ADDRESS);
 8000e5e:	2229      	movs	r2, #41	; 0x29
 8000e60:	4931      	ldr	r1, [pc, #196]	; (8000f28 <main+0x108>)
 8000e62:	4832      	ldr	r0, [pc, #200]	; (8000f2c <main+0x10c>)
 8000e64:	f000 fc2a 	bl	80016bc <TSL2591_Init>
   /*  --------------Gain Adjust TSL2591-------------------------------------------*/

  TSL2591_Set_Gain(&TSL_LuxSensor1, LOW_AGAIN);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	482e      	ldr	r0, [pc, #184]	; (8000f24 <main+0x104>)
 8000e6c:	f000 fba6 	bl	80015bc <TSL2591_Set_Gain>
  TSL2591_Set_Gain(&TSL_LuxSensor2, LOW_AGAIN);
 8000e70:	2100      	movs	r1, #0
 8000e72:	482e      	ldr	r0, [pc, #184]	; (8000f2c <main+0x10c>)
 8000e74:	f000 fba2 	bl	80015bc <TSL2591_Set_Gain>
  /*  ---------------Atime Adjust TSL2591------------------------------------------*/

  TSL2591_Set_IntegralTime(&TSL_LuxSensor1, ATIME_500MS);
 8000e78:	2104      	movs	r1, #4
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <main+0x104>)
 8000e7c:	f000 fbd6 	bl	800162c <TSL2591_Set_IntegralTime>
  TSL2591_Set_IntegralTime(&TSL_LuxSensor2, ATIME_500MS);
 8000e80:	2104      	movs	r1, #4
 8000e82:	482a      	ldr	r0, [pc, #168]	; (8000f2c <main+0x10c>)
 8000e84:	f000 fbd2 	bl	800162c <TSL2591_Set_IntegralTime>
  /*  ---------------Interrupts TSL2591------------------------------------------*/


//  TSL2591_SET_InterruptThreshold(&TSL_LuxSensor1, 0x000f, 0xff00);
//  TSL2591_SET_InterruptThreshold(&TSL_LuxSensor2, 0x000f, 0xff00);
  TSL2591_SET_LuxInterrupt(&TSL_LuxSensor1, 150, 250);
 8000e88:	22fa      	movs	r2, #250	; 0xfa
 8000e8a:	2196      	movs	r1, #150	; 0x96
 8000e8c:	4825      	ldr	r0, [pc, #148]	; (8000f24 <main+0x104>)
 8000e8e:	f000 fd47 	bl	8001920 <TSL2591_SET_LuxInterrupt>
  TSL2591_SET_LuxInterrupt(&TSL_LuxSensor2, 150, 250);
 8000e92:	22fa      	movs	r2, #250	; 0xfa
 8000e94:	2196      	movs	r1, #150	; 0x96
 8000e96:	4825      	ldr	r0, [pc, #148]	; (8000f2c <main+0x10c>)
 8000e98:	f000 fd42 	bl	8001920 <TSL2591_SET_LuxInterrupt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <main+0x110>)
 8000ea4:	f001 f8fc 	bl	80020a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TEST_LED_Ir_GPIO_Port, TEST_LED_Ir_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	4820      	ldr	r0, [pc, #128]	; (8000f30 <main+0x110>)
 8000eb0:	f001 f8f6 	bl	80020a0 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*  ---------------TSL2591 Data read------------------------------------------*/

	  LuxSensor1.value1 = TSL2591_Read_Lux(&TSL_LuxSensor1); // Lux data for Tsl Sensor 1
 8000eb4:	481b      	ldr	r0, [pc, #108]	; (8000f24 <main+0x104>)
 8000eb6:	f000 fc27 	bl	8001708 <TSL2591_Read_Lux>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <main+0x114>)
 8000ebe:	6053      	str	r3, [r2, #4]
	  LuxSensor1.value2 = TSL2591_Read_Channel1(&TSL_LuxSensor1);
 8000ec0:	4818      	ldr	r0, [pc, #96]	; (8000f24 <main+0x104>)
 8000ec2:	f000 fbee 	bl	80016a2 <TSL2591_Read_Channel1>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <main+0x114>)
 8000eca:	6093      	str	r3, [r2, #8]
//	  LuxSensor1.value1 = TSL_LuxSensor1.data_read1;    // Lux data read for Tsl Sensor 1
//	  LuxSensor1.value2 = TSL_LuxSensor1.data_read2;   // Ir Channel data read for Tsl Sensor 1

	  LuxSensor1.value1 = TSL2591_Read_Lux(&TSL_LuxSensor2);
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0x10c>)
 8000ece:	f000 fc1b 	bl	8001708 <TSL2591_Read_Lux>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <main+0x114>)
 8000ed6:	6053      	str	r3, [r2, #4]
	  LuxSensor1.value2 = TSL2591_Read_Channel1(&TSL_LuxSensor2); // Lux data for Tsl Sensor 1
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <main+0x10c>)
 8000eda:	f000 fbe2 	bl	80016a2 <TSL2591_Read_Channel1>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <main+0x114>)
 8000ee2:	6093      	str	r3, [r2, #8]


      //	  LuxSensor1.value2 = TSL2591_Read_Channel1(sensor);
//	  TslSens.atime = TSL2591_Set_IntegralTime(ATIME_500MS);

		TSL2591_SET_LuxInterrupt(&TSL_LuxSensor1, 50,200);
 8000ee4:	22c8      	movs	r2, #200	; 0xc8
 8000ee6:	2132      	movs	r1, #50	; 0x32
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <main+0x104>)
 8000eea:	f000 fd19 	bl	8001920 <TSL2591_SET_LuxInterrupt>
		TSL2591_SET_LuxInterrupt(&TSL_LuxSensor2, 50,200);
 8000eee:	22c8      	movs	r2, #200	; 0xc8
 8000ef0:	2132      	movs	r1, #50	; 0x32
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <main+0x10c>)
 8000ef4:	f000 fd14 	bl	8001920 <TSL2591_SET_LuxInterrupt>


		if(HAL_GetTick() - sec_mark_led >= 900){
 8000ef8:	f000 fe3c 	bl	8001b74 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <main+0x118>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f08:	d3d4      	bcc.n	8000eb4 <main+0x94>
			HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <main+0x110>)
 8000f10:	f001 f8de 	bl	80020d0 <HAL_GPIO_TogglePin>
			sec_mark_led = HAL_GetTick();
 8000f14:	f000 fe2e 	bl	8001b74 <HAL_GetTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <main+0x118>)
 8000f1c:	6013      	str	r3, [r2, #0]
	  LuxSensor1.value1 = TSL2591_Read_Lux(&TSL_LuxSensor1); // Lux data for Tsl Sensor 1
 8000f1e:	e7c9      	b.n	8000eb4 <main+0x94>
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	2000014c 	.word	0x2000014c
 8000f28:	200000e0 	.word	0x200000e0
 8000f2c:	20000168 	.word	0x20000168
 8000f30:	40011000 	.word	0x40011000
 8000f34:	20000138 	.word	0x20000138
 8000f38:	20000134 	.word	0x20000134

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fc74 	bl	8003838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 ff3f 	bl	8002e08 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f90:	f000 f819 	bl	8000fc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f9ac 	bl	800330c <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fba:	f000 f804 	bl	8000fc6 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3740      	adds	r7, #64	; 0x40
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fca:	b672      	cpsid	i
}
 8000fcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fce:	e7fe      	b.n	8000fce <Error_Handler+0x8>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_MspInit+0x5c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_MspInit+0x5c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_MspInit+0x60>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_MspInit+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 fd69 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e00a      	b.n	80010aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001094:	f3af 8000 	nop.w
 8001098:	4601      	mov	r1, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	60ba      	str	r2, [r7, #8]
 80010a0:	b2ca      	uxtb	r2, r1
 80010a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbf0      	blt.n	8001094 <_read+0x12>
  }

  return len;
 80010b2:	687b      	ldr	r3, [r7, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e009      	b.n	80010e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	60ba      	str	r2, [r7, #8]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbf1      	blt.n	80010ce <_write+0x12>
  }
  return len;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_close>:

int _close(int file)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <_isatty>:

int _isatty(int file)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f002 fb2e 	bl	80037e4 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20005000 	.word	0x20005000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	20000184 	.word	0x20000184
 80011bc:	20000238 	.word	0x20000238

080011c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f002 fa10 	bl	8003628 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f7ff feda 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000188 	.word	0x20000188
 800121c:	40004400 	.word	0x40004400

08001220 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART3_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART3_UART_Init+0x4c>)
 8001258:	f002 f9e6 	bl	8003628 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f7ff feb0 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001d0 	.word	0x200001d0
 8001270:	40004800 	.word	0x40004800

08001274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a40      	ldr	r2, [pc, #256]	; (8001390 <HAL_UART_MspInit+0x11c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d130      	bne.n	80012f6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_UART_MspInit+0x120>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <HAL_UART_MspInit+0x120>)
 800129a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <HAL_UART_MspInit+0x120>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_UART_MspInit+0x120>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a38      	ldr	r2, [pc, #224]	; (8001394 <HAL_UART_MspInit+0x120>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_UART_MspInit+0x120>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4830      	ldr	r0, [pc, #192]	; (8001398 <HAL_UART_MspInit+0x124>)
 80012d8:	f000 fd5e 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012dc:	2308      	movs	r3, #8
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	482a      	ldr	r0, [pc, #168]	; (8001398 <HAL_UART_MspInit+0x124>)
 80012f0:	f000 fd52 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012f4:	e048      	b.n	8001388 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_UART_MspInit+0x128>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d143      	bne.n	8001388 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_UART_MspInit+0x120>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_UART_MspInit+0x120>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_UART_MspInit+0x120>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_UART_MspInit+0x120>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_UART_MspInit+0x120>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_UART_MspInit+0x120>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4816      	ldr	r0, [pc, #88]	; (80013a0 <HAL_UART_MspInit+0x12c>)
 8001346:	f000 fd27 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800134a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x12c>)
 8001360:	f000 fd1a 	bl	8001d98 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_UART_MspInit+0x130>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_UART_MspInit+0x130>)
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	6053      	str	r3, [r2, #4]
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800
 800139c:	40004800 	.word	0x40004800
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40010000 	.word	0x40010000

080013a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff ff0a 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ae:	490c      	ldr	r1, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c4:	4c09      	ldr	r4, [pc, #36]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f002 fa0d 	bl	80037f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d6:	f7ff fd23 	bl	8000e20 <main>
  bx lr
 80013da:	4770      	bx	lr
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013e4:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 80013e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013ec:	20000234 	.word	0x20000234

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>

080013f2 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fbc4 	bl	8001b88 <HAL_Delay>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(I2C_HandleTypeDef *i2c, uint8_t address)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
#if DEV_I2C
    // Aquí puedes inicializar un nuevo dispositivo I2C
    if (DEV_I2C_Device < MAX_I2C_DEVICES)
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <DEV_I2C_Init+0x38>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d80b      	bhi.n	8001434 <DEV_I2C_Init+0x2c>
    {
        I2C_ADDR[DEV_I2C_Device] = address;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <DEV_I2C_Init+0x38>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <DEV_I2C_Init+0x3c>)
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	5453      	strb	r3, [r2, r1]
        DEV_I2C_Device++;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <DEV_I2C_Init+0x38>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <DEV_I2C_Init+0x38>)
 8001432:	701a      	strb	r2, [r3, #0]
    }
#endif
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000218 	.word	0x20000218
 8001444:	2000021c 	.word	0x2000021c

08001448 <I2C_Read_Byte>:
    }
#endif
}

int I2C_Read_Byte(I2C_HandleTypeDef *i2c, uint8_t device_index, uint8_t Cmd)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af04      	add	r7, sp, #16
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
 8001454:	4613      	mov	r3, r2
 8001456:	70bb      	strb	r3, [r7, #2]
#if DEV_I2C
    if (device_index < DEV_I2C_Device) {
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <I2C_Read_Byte+0x50>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	429a      	cmp	r2, r3
 8001460:	d214      	bcs.n	800148c <I2C_Read_Byte+0x44>
        uint8_t Buf[1] = {0};
 8001462:	2300      	movs	r3, #0
 8001464:	733b      	strb	r3, [r7, #12]
        HAL_I2C_Mem_Read(i2c, I2C_ADDR[device_index], Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <I2C_Read_Byte+0x54>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	b299      	uxth	r1, r3
 800146e:	78bb      	ldrb	r3, [r7, #2]
 8001470:	b29a      	uxth	r2, r3
 8001472:	2320      	movs	r3, #32
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 ff82 	bl	800238c <HAL_I2C_Mem_Read>
        return Buf[0];
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	e000      	b.n	800148e <I2C_Read_Byte+0x46>
    }
#endif
    return 0;  // Manejar errores apropiadamente si es necesario
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000218 	.word	0x20000218
 800149c:	2000021c 	.word	0x2000021c

080014a0 <TSL2591_Read_Byte>:
 parameter:
 Addr: Register address
 Info:
 ******************************************************************************/
//UBYTE TSL2591_Read_Byte(TSL2591_t *sensor, UBYTE reg)
uint8_t TSL2591_Read_Byte(TSL2591_t *sensor, uint8_t reg) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
		uint8_t value;
		HAL_I2C_Mem_Read(sensor->i2c_handle, sensor->address, reg, 1, &value, 1,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a1b      	ldrb	r3, [r3, #8]
 80014b4:	b299      	uxth	r1, r3
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f107 030f 	add.w	r3, r7, #15
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	f000 ff5e 	bl	800238c <HAL_I2C_Mem_Read>
				1000);
		return value;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
//    address = address | COMMAND_BIT;

//	I2C_Read_Byte(sensor->i2c_handle, sensor->address, Addr);
//    return I2C_Read_Byte(sensor, Addr);

	}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <TSL2591_Read_Word>:
	 parameter:
	 Addr: Register address
	 Info:
	 ******************************************************************************/
//UWORD TSL2591_Read_Word(TSL2591_t *sensor, UBYTE Addr)
	uint16_t TSL2591_Read_Word(TSL2591_t *sensor, uint8_t reg) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af04      	add	r7, sp, #16
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2];
		uint16_t value;
		HAL_I2C_Mem_Read(sensor->i2c_handle, sensor->address, reg, 1, buffer, 2,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7a1b      	ldrb	r3, [r3, #8]
 80014ee:	b299      	uxth	r1, r3
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f000 ff41 	bl	800238c <HAL_I2C_Mem_Read>
				1000);
		value = (buffer[1] << 8) | buffer[0];
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21b      	sxth	r3, r3
 8001518:	81fb      	strh	r3, [r7, #14]
		return value;
 800151a:	89fb      	ldrh	r3, [r7, #14]
//       address = address | COMMAND_BIT;
//	I2C_Read_Word(sensor->i2c_handle, sensor->address, Addr);
//    return I2C_Read_Word(Addr);
	}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <TSL2591_Write_Byte>:
	 parameter:
	 Addr: Register address
	 Value: Write to the value of the register
	 Info:
	 ******************************************************************************/
	void TSL2591_Write_Byte(TSL2591_t *sensor, UBYTE Addr, UBYTE Value) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
 8001530:	4613      	mov	r3, r2
 8001532:	70bb      	strb	r3, [r7, #2]
		Addr = Addr | COMMAND_BIT;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800153a:	70fb      	strb	r3, [r7, #3]
		I2C_Read_Byte(sensor->i2c_handle, sensor->address, Addr);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff ff7e 	bl	8001448 <I2C_Read_Byte>

//    I2C_Write_Byte(Addr, Value);
	}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <TSL2591_Enable>:
	/******************************************************************************
	 function:	Enable TSL2591
	 parameter:
	 Info:
	 ******************************************************************************/
	void TSL2591_Enable(TSL2591_t *sensor) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
		TSL2591_Write_Byte(sensor, COMMAND_BIT | ENABLE_REGISTER,
 800155c:	2203      	movs	r2, #3
 800155e:	21a0      	movs	r1, #160	; 0xa0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffdf 	bl	8001524 <TSL2591_Write_Byte>
				ENABLE_POWERON | ENABLE_AEN);
	}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <TSL2591_Disable>:
	/******************************************************************************
	 function:	Disable TSL2591
	 parameter:
	 Info:
	 ******************************************************************************/
	void TSL2591_Disable(TSL2591_t *sensor) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
		TSL2591_Write_Byte(sensor, COMMAND_BIT | ENABLE_REGISTER,
 8001576:	2200      	movs	r2, #0
 8001578:	21a0      	movs	r1, #160	; 0xa0
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffd2 	bl	8001524 <TSL2591_Write_Byte>
				ENABLE_POWEROFF);
	}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <TSL2591_Get_Gain>:
	/******************************************************************************
	 function:	Read TSL2591 gain
	 parameter:
	 Info:
	 ******************************************************************************/
	UBYTE TSL2591_Get_Gain(TSL2591_t *sensor) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
		 MEDIUM_AGAIN        = (0X10)        (25x)
		 HIGH_AGAIN          = (0X20)        (428x)
		 MAX_AGAIN           = (0x30)        (9876x)
		 *************************************************/
		UBYTE data;
		data = TSL2591_Read_Byte(sensor, CONTROL_REGISTER);
 8001590:	2101      	movs	r1, #1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff84 	bl	80014a0 <TSL2591_Read_Byte>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
		TSL2591_Gain = data & 0x30;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <TSL2591_Get_Gain+0x30>)
 80015a6:	701a      	strb	r2, [r3, #0]
		return data & 0x30;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015ae:	b2db      	uxtb	r3, r3
	}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000021e 	.word	0x2000021e

080015bc <TSL2591_Set_Gain>:
	/******************************************************************************
	 function:	Set the TSL2591 gain
	 parameter:
	 Info:
	 ******************************************************************************/
	void TSL2591_Set_Gain(TSL2591_t *sensor, UBYTE Gain) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
		UBYTE control = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
		if (Gain == LOW_AGAIN || Gain == MEDIUM_AGAIN || Gain == HIGH_AGAIN
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <TSL2591_Set_Gain+0x28>
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d005      	beq.n	80015e4 <TSL2591_Set_Gain+0x28>
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d002      	beq.n	80015e4 <TSL2591_Set_Gain+0x28>
				|| Gain == MAX_AGAIN) {
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	2b30      	cmp	r3, #48	; 0x30
 80015e2:	d117      	bne.n	8001614 <TSL2591_Set_Gain+0x58>
			control = TSL2591_Read_Byte(sensor, CONTROL_REGISTER);
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff5a 	bl	80014a0 <TSL2591_Read_Byte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
			control &= 0xCf; //0b11001111
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015f6:	73fb      	strb	r3, [r7, #15]
			control |= Gain;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	73fb      	strb	r3, [r7, #15]
			TSL2591_Write_Byte(sensor, CONTROL_REGISTER, control);
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	461a      	mov	r2, r3
 8001604:	2101      	movs	r1, #1
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff8c 	bl	8001524 <TSL2591_Write_Byte>
			TSL2591_Gain = Gain;
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <TSL2591_Set_Gain+0x68>)
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	7013      	strb	r3, [r2, #0]
 8001612:	e003      	b.n	800161c <TSL2591_Set_Gain+0x60>
		} else {
			printf("Gain Parameter Error\r\n");
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <TSL2591_Set_Gain+0x6c>)
 8001616:	f002 f99d 	bl	8003954 <puts>
		}
	}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000021e 	.word	0x2000021e
 8001628:	08004874 	.word	0x08004874

0800162c <TSL2591_Set_IntegralTime>:
	/******************************************************************************
	 function:	Set the TSL2591 Integral Time
	 parameter:
	 Info:
	 ******************************************************************************/
	void TSL2591_Set_IntegralTime(TSL2591_t *sensor, UBYTE Time) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
		UBYTE control = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
		if (Time < 0x06) {
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d817      	bhi.n	8001672 <TSL2591_Set_IntegralTime+0x46>
			control = TSL2591_Read_Byte(sensor, CONTROL_REGISTER);
 8001642:	2101      	movs	r1, #1
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff2b 	bl	80014a0 <TSL2591_Read_Byte>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
			control &= 0xf8; //0b11111000
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f023 0307 	bic.w	r3, r3, #7
 8001654:	73fb      	strb	r3, [r7, #15]
			control |= Time;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	4313      	orrs	r3, r2
 800165c:	73fb      	strb	r3, [r7, #15]
			TSL2591_Write_Byte(sensor, CONTROL_REGISTER, control);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	461a      	mov	r2, r3
 8001662:	2101      	movs	r1, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff5d 	bl	8001524 <TSL2591_Write_Byte>
			TSL2591_Time = Time;
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <TSL2591_Set_IntegralTime+0x54>)
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	7013      	strb	r3, [r2, #0]
		} else {
			printf("Integral Time Parameter Error\r\n");
		}
	}
 8001670:	e002      	b.n	8001678 <TSL2591_Set_IntegralTime+0x4c>
			printf("Integral Time Parameter Error\r\n");
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <TSL2591_Set_IntegralTime+0x58>)
 8001674:	f002 f96e 	bl	8003954 <puts>
	}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000021f 	.word	0x2000021f
 8001684:	0800488c 	.word	0x0800488c

08001688 <TSL2591_Read_Channel0>:
	/******************************************************************************
	 function:	Read channel data
	 parameter:
	 Info:
	 ******************************************************************************/
	int TSL2591_Read_Channel0(TSL2591_t *sensor) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		return TSL2591_Read_Word(sensor, CHAN0_LOW);
 8001690:	2114      	movs	r1, #20
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff21 	bl	80014da <TSL2591_Read_Word>
 8001698:	4603      	mov	r3, r0
	}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <TSL2591_Read_Channel1>:

	int TSL2591_Read_Channel1(TSL2591_t *sensor) {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
		return TSL2591_Read_Word(sensor, CHAN1_LOW);
 80016aa:	2116      	movs	r1, #22
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff14 	bl	80014da <TSL2591_Read_Word>
 80016b2:	4603      	mov	r3, r0
	}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <TSL2591_Init>:
	 function:	TSL2591 Initialization
	 parameter:
	 Info:
	 ******************************************************************************/
	void TSL2591_Init(TSL2591_t *sensor, I2C_HandleTypeDef *i2c,
			uint8_t address) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	71fb      	strb	r3, [r7, #7]
		sensor->i2c_handle = i2c;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	601a      	str	r2, [r3, #0]
		sensor->address = address;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	721a      	strb	r2, [r3, #8]

		// Inicializa la comunicación I2C
		DEV_I2C_Init(i2c, address << 1);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f7ff fe92 	bl	8001408 <DEV_I2C_Init>

		// Configura el sensor
		TSL2591_Enable(sensor);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff ff35 	bl	8001554 <TSL2591_Enable>
		TSL2591_Write_Byte(sensor, PERSIST_REGISTER, 0x01);
 80016ea:	2201      	movs	r2, #1
 80016ec:	210c      	movs	r1, #12
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff ff18 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Disable(sensor);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ff3a 	bl	800156e <TSL2591_Disable>
	}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	0000      	movs	r0, r0
 8001704:	0000      	movs	r0, r0
	...

08001708 <TSL2591_Read_Lux>:
	/******************************************************************************
	 function:	Read TSL2591 data to convert to Lux value
	 parameter:
	 Info:
	 ******************************************************************************/
	float TSL2591_Read_Lux(TSL2591_t *sensor) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
		UWORD atime, max_counts, channel_0, channel_1;
		TSL2591_Enable(sensor);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff1f 	bl	8001554 <TSL2591_Enable>
		for (UBYTE i = 0; i < TSL2591_Time + 2; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800171c:	e007      	b.n	800172e <TSL2591_Read_Lux+0x26>
			DEV_Delay_ms(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f7ff fe67 	bl	80013f2 <DEV_Delay_ms>
		for (UBYTE i = 0; i < TSL2591_Time + 2; i++) {
 8001724:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001728:	3301      	adds	r3, #1
 800172a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <TSL2591_Read_Lux+0x200>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001738:	429a      	cmp	r2, r3
 800173a:	daf0      	bge.n	800171e <TSL2591_Read_Lux+0x16>
		}
//    if(DEV_Digital_Read(INT_PIN) == 1)
//            printf("INT 0\r\n");
//    else
//             printf("INT 1\r\n");
		channel_0 = TSL2591_Read_Channel0(sensor);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffa3 	bl	8001688 <TSL2591_Read_Channel0>
 8001742:	4603      	mov	r3, r0
 8001744:	85bb      	strh	r3, [r7, #44]	; 0x2c
		channel_1 = TSL2591_Read_Channel1(sensor);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffab 	bl	80016a2 <TSL2591_Read_Channel1>
 800174c:	4603      	mov	r3, r0
 800174e:	857b      	strh	r3, [r7, #42]	; 0x2a
		TSL2591_Disable(sensor);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff0c 	bl	800156e <TSL2591_Disable>
		TSL2591_Enable(sensor);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fefc 	bl	8001554 <TSL2591_Enable>
		TSL2591_Write_Byte(sensor, 0xE7, 0x13);
 800175c:	2213      	movs	r2, #19
 800175e:	21e7      	movs	r1, #231	; 0xe7
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fedf 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Disable(sensor);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff01 	bl	800156e <TSL2591_Disable>

		atime = 100 * TSL2591_Time + 100;
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <TSL2591_Read_Lux+0x200>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4413      	add	r3, r2
 800177a:	461a      	mov	r2, r3
 800177c:	0091      	lsls	r1, r2, #2
 800177e:	461a      	mov	r2, r3
 8001780:	460b      	mov	r3, r1
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	83fb      	strh	r3, [r7, #30]
		if (TSL2591_Time == ATIME_100MS) {
 8001788:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <TSL2591_Read_Lux+0x200>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <TSL2591_Read_Lux+0x90>
			max_counts = MAX_COUNT_100MS;
 8001790:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8001794:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001796:	e002      	b.n	800179e <TSL2591_Read_Lux+0x96>
		} else {
			max_counts = MAX_COUNT;
 8001798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		UBYTE gain_t;
		if (channel_0 >= max_counts || channel_1 >= max_counts) {
 800179e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d203      	bcs.n	80017ae <TSL2591_Read_Lux+0xa6>
 80017a6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80017a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d332      	bcc.n	8001814 <TSL2591_Read_Lux+0x10c>
			gain_t = TSL2591_Get_Gain(sensor);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff feea 	bl	8001588 <TSL2591_Get_Gain>
 80017b4:	4603      	mov	r3, r0
 80017b6:	777b      	strb	r3, [r7, #29]
			if (gain_t != LOW_AGAIN) {
 80017b8:	7f7b      	ldrb	r3, [r7, #29]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <TSL2591_Read_Lux+0x100>
				gain_t = ((gain_t >> 4) - 1) << 4;
 80017be:	7f7b      	ldrb	r3, [r7, #29]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	777b      	strb	r3, [r7, #29]
				TSL2591_Set_Gain(sensor, gain_t);
 80017cc:	7f7b      	ldrb	r3, [r7, #29]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fef3 	bl	80015bc <TSL2591_Set_Gain>
				channel_0 = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
				channel_1 = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	857b      	strh	r3, [r7, #42]	; 0x2a
				while (channel_0 <= 0 || channel_1 <= 0) {
 80017de:	e009      	b.n	80017f4 <TSL2591_Read_Lux+0xec>
					channel_0 = TSL2591_Read_Channel0(sensor);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff51 	bl	8001688 <TSL2591_Read_Channel0>
 80017e6:	4603      	mov	r3, r0
 80017e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
					channel_1 = TSL2591_Read_Channel1(sensor);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff59 	bl	80016a2 <TSL2591_Read_Channel1>
 80017f0:	4603      	mov	r3, r0
 80017f2:	857b      	strh	r3, [r7, #42]	; 0x2a
				while (channel_0 <= 0 || channel_1 <= 0) {
 80017f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f2      	beq.n	80017e0 <TSL2591_Read_Lux+0xd8>
 80017fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ef      	beq.n	80017e0 <TSL2591_Read_Lux+0xd8>
				}
				DEV_Delay_ms(100);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f7ff fdf6 	bl	80013f2 <DEV_Delay_ms>
 8001806:	e005      	b.n	8001814 <TSL2591_Read_Lux+0x10c>
			} else {
				printf("Numerical overflow!/r/n");
 8001808:	4840      	ldr	r0, [pc, #256]	; (800190c <TSL2591_Read_Lux+0x204>)
 800180a:	f002 f81d 	bl	8003848 <iprintf>
				return 0;
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e06c      	b.n	80018ee <TSL2591_Read_Lux+0x1e6>
			}
		}
		double again;
		again = 1.0;
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <TSL2591_Read_Lux+0x208>)
 800181a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (TSL2591_Gain == MEDIUM_AGAIN) {
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <TSL2591_Read_Lux+0x20c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d105      	bne.n	8001832 <TSL2591_Read_Lux+0x12a>
			again = 25.0;
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <TSL2591_Read_Lux+0x210>)
 800182c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001830:	e012      	b.n	8001858 <TSL2591_Read_Lux+0x150>
		} else if (TSL2591_Gain == HIGH_AGAIN) {
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <TSL2591_Read_Lux+0x20c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b20      	cmp	r3, #32
 8001838:	d105      	bne.n	8001846 <TSL2591_Read_Lux+0x13e>
			again = 428.0;
 800183a:	a32f      	add	r3, pc, #188	; (adr r3, 80018f8 <TSL2591_Read_Lux+0x1f0>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001844:	e008      	b.n	8001858 <TSL2591_Read_Lux+0x150>
		} else if (TSL2591_Gain == MAX_AGAIN) {
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <TSL2591_Read_Lux+0x20c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b30      	cmp	r3, #48	; 0x30
 800184c:	d104      	bne.n	8001858 <TSL2591_Read_Lux+0x150>
			again = 9876.0;
 800184e:	a32c      	add	r3, pc, #176	; (adr r3, 8001900 <TSL2591_Read_Lux+0x1f8>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		double Cpl;
		UWORD lux1, lux2 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	837b      	strh	r3, [r7, #26]

		Cpl = (atime * again) / LUX_DF;
 800185c:	8bfb      	ldrh	r3, [r7, #30]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fdc8 	bl	80003f4 <__aeabi_i2d>
 8001864:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001868:	f7fe fe2e 	bl	80004c8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <TSL2591_Read_Lux+0x214>)
 800187a:	f7fe ff4f 	bl	800071c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	e9c7 2304 	strd	r2, r3, [r7, #16]
		lux1 = (int) ((channel_0 - (2 * channel_1)) / Cpl);
 8001886:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdb0 	bl	80003f4 <__aeabi_i2d>
 8001894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001898:	f7fe ff40 	bl	800071c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f822 	bl	80008ec <__aeabi_d2iz>
 80018a8:	4603      	mov	r3, r0
 80018aa:	81fb      	strh	r3, [r7, #14]
		sensor->data_read1 = (float) lux1;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f8fa 	bl	8000aa8 <__aeabi_ui2f>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	615a      	str	r2, [r3, #20]
		sensor->data_read2 = (float) channel_1;
 80018ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f8f3 	bl	8000aa8 <__aeabi_ui2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f947 	bl	8000b58 <__aeabi_f2iz>
 80018ca:	4602      	mov	r2, r0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
		// lux2 = ((0.6 * channel_0) - (channel_1)) / Cpl;
		// This is a two segment lux equation where the first
		// segment (Lux1) covers fluorescent and incandescent light
		// and the second segment (Lux2) covers dimmed incandescent light

		if (lux1 > lux2) {
 80018d0:	89fa      	ldrh	r2, [r7, #14]
 80018d2:	8b7b      	ldrh	r3, [r7, #26]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d905      	bls.n	80018e4 <TSL2591_Read_Lux+0x1dc>
			return lux1;
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f8e4 	bl	8000aa8 <__aeabi_ui2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	e004      	b.n	80018ee <TSL2591_Read_Lux+0x1e6>
		} else {
			return lux2;
 80018e4:	8b7b      	ldrh	r3, [r7, #26]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f8de 	bl	8000aa8 <__aeabi_ui2f>
 80018ec:	4603      	mov	r3, r0
		}
	}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	00000000 	.word	0x00000000
 80018fc:	407ac000 	.word	0x407ac000
 8001900:	00000000 	.word	0x00000000
 8001904:	40c34a00 	.word	0x40c34a00
 8001908:	2000021f 	.word	0x2000021f
 800190c:	080048ac 	.word	0x080048ac
 8001910:	3ff00000 	.word	0x3ff00000
 8001914:	2000021e 	.word	0x2000021e
 8001918:	40390000 	.word	0x40390000
 800191c:	4087d000 	.word	0x4087d000

08001920 <TSL2591_SET_LuxInterrupt>:
	 SET_HIGH: Interrupt high threshold
	 Info:   Based on Lux as a comparison
	 Need to use the function TSL2591_Read_Lux() to update the data
	 ******************************************************************************/
	void TSL2591_SET_LuxInterrupt(TSL2591_t *sensor, UWORD SET_LOW,
			UWORD SET_HIGH) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	803b      	strh	r3, [r7, #0]
		double Cpl;
		double again;
		UWORD atime, channel_1;
		atime = 100 * TSL2591_Time + 100;
 8001930:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <TSL2591_SET_LuxInterrupt+0x190>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4413      	add	r3, r2
 800193e:	461a      	mov	r2, r3
 8001940:	0091      	lsls	r1, r2, #2
 8001942:	461a      	mov	r2, r3
 8001944:	460b      	mov	r3, r1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	83fb      	strh	r3, [r7, #30]
		again = 1.0;
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <TSL2591_SET_LuxInterrupt+0x194>)
 8001952:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (TSL2591_Gain == MEDIUM_AGAIN) {
 8001956:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <TSL2591_SET_LuxInterrupt+0x198>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d105      	bne.n	800196a <TSL2591_SET_LuxInterrupt+0x4a>
			again = 25.0;
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <TSL2591_SET_LuxInterrupt+0x19c>)
 8001964:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001968:	e012      	b.n	8001990 <TSL2591_SET_LuxInterrupt+0x70>
		} else if (TSL2591_Gain == HIGH_AGAIN) {
 800196a:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <TSL2591_SET_LuxInterrupt+0x198>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d105      	bne.n	800197e <TSL2591_SET_LuxInterrupt+0x5e>
			again = 428.0;
 8001972:	a34b      	add	r3, pc, #300	; (adr r3, 8001aa0 <TSL2591_SET_LuxInterrupt+0x180>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800197c:	e008      	b.n	8001990 <TSL2591_SET_LuxInterrupt+0x70>
		} else if (TSL2591_Gain == MAX_AGAIN) {
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <TSL2591_SET_LuxInterrupt+0x198>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b30      	cmp	r3, #48	; 0x30
 8001984:	d104      	bne.n	8001990 <TSL2591_SET_LuxInterrupt+0x70>
			again = 9876.0;
 8001986:	a348      	add	r3, pc, #288	; (adr r3, 8001aa8 <TSL2591_SET_LuxInterrupt+0x188>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		Cpl = (atime * again) / LUX_DF;
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd2e 	bl	80003f4 <__aeabi_i2d>
 8001998:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800199c:	f7fe fd94 	bl	80004c8 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b44      	ldr	r3, [pc, #272]	; (8001ac0 <TSL2591_SET_LuxInterrupt+0x1a0>)
 80019ae:	f7fe feb5 	bl	800071c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		channel_1 = TSL2591_Read_Channel1(sensor);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fe71 	bl	80016a2 <TSL2591_Read_Channel1>
 80019c0:	4603      	mov	r3, r0
 80019c2:	81fb      	strh	r3, [r7, #14]

		SET_HIGH = (int) (Cpl * SET_HIGH) + 2 * channel_1 - 1;
 80019c4:	883b      	ldrh	r3, [r7, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd14 	bl	80003f4 <__aeabi_i2d>
 80019cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d0:	f7fe fd7a 	bl	80004c8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ff86 	bl	80008ec <__aeabi_d2iz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	803b      	strh	r3, [r7, #0]
		SET_LOW = (int) (Cpl * SET_LOW) + 2 * channel_1 + 1;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fcfd 	bl	80003f4 <__aeabi_i2d>
 80019fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fe:	f7fe fd63 	bl	80004c8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7fe ff6f 	bl	80008ec <__aeabi_d2iz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	807b      	strh	r3, [r7, #2]

		TSL2591_Enable(sensor);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fd97 	bl	8001554 <TSL2591_Enable>
		TSL2591_Write_Byte(sensor, AILTL_REGISTER, SET_LOW & 0xFF);
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fd78 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Write_Byte(sensor, AILTH_REGISTER, SET_LOW >> 8);
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2105      	movs	r1, #5
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fd6f 	bl	8001524 <TSL2591_Write_Byte>

		TSL2591_Write_Byte(sensor, AIHTL_REGISTER, SET_HIGH & 0xFF);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2106      	movs	r1, #6
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fd68 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Write_Byte(sensor, AIHTH_REGISTER, SET_HIGH >> 8);
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2107      	movs	r1, #7
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fd5f 	bl	8001524 <TSL2591_Write_Byte>

		TSL2591_Write_Byte(sensor, NPAILTL_REGISTER, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2108      	movs	r1, #8
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fd5a 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Write_Byte(sensor, NPAILTH_REGISTER, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2109      	movs	r1, #9
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fd55 	bl	8001524 <TSL2591_Write_Byte>

		TSL2591_Write_Byte(sensor, NPAIHTL_REGISTER, 0xff);
 8001a7a:	22ff      	movs	r2, #255	; 0xff
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fd50 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Write_Byte(sensor, NPAIHTH_REGISTER, 0xff);
 8001a84:	22ff      	movs	r2, #255	; 0xff
 8001a86:	210b      	movs	r1, #11
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fd4b 	bl	8001524 <TSL2591_Write_Byte>
		TSL2591_Disable(sensor);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fd6d 	bl	800156e <TSL2591_Disable>
	}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	407ac000 	.word	0x407ac000
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	40c34a00 	.word	0x40c34a00
 8001ab0:	2000021f 	.word	0x2000021f
 8001ab4:	3ff00000 	.word	0x3ff00000
 8001ab8:	2000021e 	.word	0x2000021e
 8001abc:	40390000 	.word	0x40390000
 8001ac0:	4087d000 	.word	0x4087d000

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f92b 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fa76 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f935 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f90b 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000220 	.word	0x20000220

08001b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000220 	.word	0x20000220

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffe0 	bl	8001b74 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff49 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff5e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffb0 	bl	8001cec <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e169      	b.n	8002080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8158 	bne.w	800207a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a9a      	ldr	r2, [pc, #616]	; (8002038 <HAL_GPIO_Init+0x2a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a98      	ldr	r2, [pc, #608]	; (8002038 <HAL_GPIO_Init+0x2a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4a98      	ldr	r2, [pc, #608]	; (800203c <HAL_GPIO_Init+0x2a4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a96      	ldr	r2, [pc, #600]	; (800203c <HAL_GPIO_Init+0x2a4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a96      	ldr	r2, [pc, #600]	; (8002040 <HAL_GPIO_Init+0x2a8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a94      	ldr	r2, [pc, #592]	; (8002040 <HAL_GPIO_Init+0x2a8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a94      	ldr	r2, [pc, #592]	; (8002044 <HAL_GPIO_Init+0x2ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a92      	ldr	r2, [pc, #584]	; (8002044 <HAL_GPIO_Init+0x2ac>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a92      	ldr	r2, [pc, #584]	; (8002048 <HAL_GPIO_Init+0x2b0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a90      	ldr	r2, [pc, #576]	; (8002048 <HAL_GPIO_Init+0x2b0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a79      	ldr	r2, [pc, #484]	; (800204c <HAL_GPIO_Init+0x2b4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80b1 	beq.w	800207a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_GPIO_Init+0x2bc>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	; (8002058 <HAL_GPIO_Init+0x2c0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <HAL_GPIO_Init+0x1ec>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00d      	beq.n	8001f80 <HAL_GPIO_Init+0x1e8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x1e4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3d      	ldr	r2, [pc, #244]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e004      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f84:	2300      	movs	r3, #0
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f96:	492f      	ldr	r1, [pc, #188]	; (8002054 <HAL_GPIO_Init+0x2bc>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	492c      	ldr	r1, [pc, #176]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4928      	ldr	r1, [pc, #160]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	4922      	ldr	r1, [pc, #136]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	491e      	ldr	r1, [pc, #120]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4918      	ldr	r1, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4914      	ldr	r1, [pc, #80]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d021      	beq.n	800206c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e021      	b.n	800207a <HAL_GPIO_Init+0x2e2>
 8002036:	bf00      	nop
 8002038:	10320000 	.word	0x10320000
 800203c:	10310000 	.word	0x10310000
 8002040:	10220000 	.word	0x10220000
 8002044:	10210000 	.word	0x10210000
 8002048:	10120000 	.word	0x10120000
 800204c:	10110000 	.word	0x10110000
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	40010800 	.word	0x40010800
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40011000 	.word	0x40011000
 8002064:	40011400 	.word	0x40011400
 8002068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_GPIO_Init+0x304>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	43db      	mvns	r3, r3
 8002074:	4909      	ldr	r1, [pc, #36]	; (800209c <HAL_GPIO_Init+0x304>)
 8002076:	4013      	ands	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	3301      	adds	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f47f ae8e 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	372c      	adds	r7, #44	; 0x2c
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43d9      	mvns	r1, r3
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	400b      	ands	r3, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12b      	b.n	800236e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fdfc 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002168:	f001 fa18 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a81      	ldr	r2, [pc, #516]	; (8002378 <HAL_I2C_Init+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d807      	bhi.n	8002188 <HAL_I2C_Init+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a80      	ldr	r2, [pc, #512]	; (800237c <HAL_I2C_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e006      	b.n	8002196 <HAL_I2C_Init+0x92>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <HAL_I2C_Init+0x27c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a78      	ldr	r2, [pc, #480]	; (8002384 <HAL_I2C_Init+0x280>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_I2C_Init+0x274>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <HAL_I2C_Init+0xd4>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_I2C_Init+0xe8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a69      	ldr	r2, [pc, #420]	; (8002388 <HAL_I2C_Init+0x284>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	495c      	ldr	r1, [pc, #368]	; (8002378 <HAL_I2C_Init+0x274>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d819      	bhi.n	8002240 <HAL_I2C_Init+0x13c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e59      	subs	r1, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002220:	400b      	ands	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_I2C_Init+0x138>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e59      	subs	r1, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb1 f3f3 	udiv	r3, r1, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	e051      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800223c:	2304      	movs	r3, #4
 800223e:	e04f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_I2C_Init+0x168>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e012      	b.n	8002292 <HAL_I2C_Init+0x18e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x196>
 8002296:	2301      	movs	r3, #1
 8002298:	e022      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <HAL_I2C_Init+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e58      	subs	r0, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800230e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023aa:	f7ff fbe3 	bl	8001b74 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	f040 8244 	bne.w	8002846 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2319      	movs	r3, #25
 80023c4:	2201      	movs	r2, #1
 80023c6:	4982      	ldr	r1, [pc, #520]	; (80025d0 <HAL_I2C_Mem_Read+0x244>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fb2f 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
 80023d6:	e237      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Mem_Read+0x5a>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e230      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d007      	beq.n	800240c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2222      	movs	r2, #34	; 0x22
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a62      	ldr	r2, [pc, #392]	; (80025d4 <HAL_I2C_Mem_Read+0x248>)
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244e:	88f8      	ldrh	r0, [r7, #6]
 8002450:	893a      	ldrh	r2, [r7, #8]
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4603      	mov	r3, r0
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f9fc 	bl	800285c <I2C_RequestMemoryRead>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1ec      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e1c0      	b.n	8002820 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d11e      	bne.n	80024e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024b6:	b672      	cpsid	i
}
 80024b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024e0:	b662      	cpsie	i
}
 80024e2:	e035      	b.n	8002550 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11e      	bne.n	800252a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002526:	b662      	cpsie	i
}
 8002528:	e012      	b.n	8002550 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002538:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002550:	e166      	b.n	8002820 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	2b03      	cmp	r3, #3
 8002558:	f200 811f 	bhi.w	800279a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b01      	cmp	r3, #1
 8002562:	d123      	bne.n	80025ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fbc1 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e167      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025aa:	e139      	b.n	8002820 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d152      	bne.n	800265a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	2200      	movs	r2, #0
 80025bc:	4906      	ldr	r1, [pc, #24]	; (80025d8 <HAL_I2C_Mem_Read+0x24c>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa34 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e13c      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
 80025ce:	bf00      	nop
 80025d0:	00100002 	.word	0x00100002
 80025d4:	ffff0000 	.word	0xffff0000
 80025d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002622:	b662      	cpsie	i
}
 8002624:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002658:	e0e2      	b.n	8002820 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2200      	movs	r2, #0
 8002662:	497b      	ldr	r1, [pc, #492]	; (8002850 <HAL_I2C_Mem_Read+0x4c4>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9e1 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0e9      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ba:	4b66      	ldr	r3, [pc, #408]	; (8002854 <HAL_I2C_Mem_Read+0x4c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_I2C_Mem_Read+0x4cc>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a1a      	lsrs	r2, r3, #8
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00da      	lsls	r2, r3, #3
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d118      	bne.n	8002712 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002702:	b662      	cpsie	i
}
 8002704:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e09a      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d1d9      	bne.n	80026d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002762:	b662      	cpsie	i
}
 8002764:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002798:	e042      	b.n	8002820 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 faa6 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e04c      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d118      	bne.n	8002820 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f ae94 	bne.w	8002552 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00010004 	.word	0x00010004
 8002854:	20000000 	.word	0x20000000
 8002858:	14f8b589 	.word	0x14f8b589

0800285c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8c2 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d103      	bne.n	80028c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0aa      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	4952      	ldr	r1, [pc, #328]	; (8002a28 <I2C_RequestMemoryRead+0x1cc>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f91d 	bl	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e097      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f9a8 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e076      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e021      	b.n	8002988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f982 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e050      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f967 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e035      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f82b 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d103      	bne.n	80029f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e013      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029f8:	897b      	ldrh	r3, [r7, #10]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <I2C_RequestMemoryRead+0x1cc>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f886 	bl	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	00010002 	.word	0x00010002

08002a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3c:	e048      	b.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d044      	beq.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7ff f895 	bl	8001b74 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d139      	bne.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10d      	bne.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	e00c      	b.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d116      	bne.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e023      	b.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10d      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	e00c      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d093      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b2e:	e071      	b.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d123      	bne.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e067      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d041      	beq.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7fe fff0 	bl	8001b74 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d136      	bne.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10c      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e00b      	b.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e021      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10c      	bne.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e00b      	b.n	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af6d 	bne.w	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6c:	e034      	b.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f89b 	bl	8002daa <I2C_IsAcknowledgeFailed>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e034      	b.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d028      	beq.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe ff75 	bl	8001b74 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11d      	bne.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d016      	beq.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b80      	cmp	r3, #128	; 0x80
 8002ce4:	d1c3      	bne.n	8002c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfc:	e049      	b.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d119      	bne.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0210 	mvn.w	r2, #16
 8002d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e030      	b.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe ff18 	bl	8001b74 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11d      	bne.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d016      	beq.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d1ae      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	d11b      	bne.n	8002dfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e272      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8087 	beq.w	8002f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d00c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d112      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
 8002e40:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d10b      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d06c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x12c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d168      	bne.n	8002f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e24c      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x76>
 8002e70:	4b80      	ldr	r3, [pc, #512]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7f      	ldr	r2, [pc, #508]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e02e      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7a      	ldr	r2, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fe46 	bl	8001b74 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fe42 	bl	8001b74 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e200      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0xe4>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fe32 	bl	8001b74 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fe2e 	bl	8001b74 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1ec      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x10c>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
 8002f5a:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1c0      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4939      	ldr	r1, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fde7 	bl	8001b74 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fe fde3 	bl	8001b74 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1a1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4927      	ldr	r1, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fdc6 	bl	8001b74 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fe fdc2 	bl	8001b74 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e180      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03a      	beq.n	800308c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_RCC_OscConfig+0x274>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe fda6 	bl	8001b74 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fda2 	bl	8001b74 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e160      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800304a:	2001      	movs	r0, #1
 800304c:	f000 face 	bl	80035ec <RCC_Delay>
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_OscConfig+0x274>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7fe fd8c 	bl	8001b74 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305e:	e00f      	b.n	8003080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003060:	f7fe fd88 	bl	8001b74 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d908      	bls.n	8003080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e146      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	42420000 	.word	0x42420000
 800307c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e9      	bne.n	8003060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a6 	beq.w	80031e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a87      	ldr	r2, [pc, #540]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe fd49 	bl	8001b74 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe fd45 	bl	8001b74 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e103      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x312>
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e02d      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x334>
 8003122:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a69      	ldr	r2, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	e01c      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x356>
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800315e:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fcf9 	bl	8001b74 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fcf5 	bl	8001b74 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0b1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b4b      	ldr	r3, [pc, #300]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x37e>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fce3 	bl	8001b74 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fcdf 	bl	8001b74 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8087 	beq.w	80032fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d061      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d146      	bne.n	8003292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fcb3 	bl	8001b74 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fcaf 	bl	8001b74 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e06d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d108      	bne.n	800324c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4921      	ldr	r1, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a19      	ldr	r1, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	430b      	orrs	r3, r1
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fc83 	bl	8001b74 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe fc7f 	bl	8001b74 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x46a>
 8003290:	e035      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fc6c 	bl	8001b74 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fc68 	bl	8001b74 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e026      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x498>
 80032be:	e01e      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e019      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x500>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d910      	bls.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b67      	ldr	r3, [pc, #412]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4965      	ldr	r1, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800338a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d040      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e073      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06b      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4936      	ldr	r1, [pc, #216]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fbba 	bl	8001b74 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fbb6 	bl	8001b74 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e053      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d210      	bcs.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1cc>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1d0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fb18 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40022000 	.word	0x40022000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	080048c4 	.word	0x080048c4
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x30>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x36>
 800350e:	e027      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003512:	613b      	str	r3, [r7, #16]
      break;
 8003514:	e027      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0c9b      	lsrs	r3, r3, #18
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	fb03 f202 	mul.w	r2, r3, r2
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e004      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	613b      	str	r3, [r7, #16]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003562:	613b      	str	r3, [r7, #16]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	693b      	ldr	r3, [r7, #16]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	080048dc 	.word	0x080048dc
 8003580:	080048ec 	.word	0x080048ec
 8003584:	003d0900 	.word	0x003d0900

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_RCC_GetHCLKFreq+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff2 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080048d4 	.word	0x080048d4

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffde 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	080048d4 	.word	0x080048d4

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	20000000 	.word	0x20000000
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e042      	b.n	80036c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fe10 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f82b 	bl	80036c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003702:	f023 030c 	bic.w	r3, r3, #12
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	430b      	orrs	r3, r1
 800370e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2c      	ldr	r2, [pc, #176]	; (80037dc <UART_SetConfig+0x114>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d103      	bne.n	8003738 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003730:	f7ff ff48 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	e002      	b.n	800373e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003738:	f7ff ff30 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 800373c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <UART_SetConfig+0x118>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	0119      	lsls	r1, r3, #4
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <UART_SetConfig+0x118>)
 8003776:	fba3 0302 	umull	r0, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2064      	movs	r0, #100	; 0x64
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003794:	4419      	add	r1, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <UART_SetConfig+0x118>)
 80037ae:	fba3 0302 	umull	r0, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2064      	movs	r0, #100	; 0x64
 80037b6:	fb00 f303 	mul.w	r3, r0, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	3332      	adds	r3, #50	; 0x32
 80037c0:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <UART_SetConfig+0x118>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	440a      	add	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40013800 	.word	0x40013800
 80037e0:	51eb851f 	.word	0x51eb851f

080037e4 <__errno>:
 80037e4:	4b01      	ldr	r3, [pc, #4]	; (80037ec <__errno+0x8>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000000c 	.word	0x2000000c

080037f0 <__libc_init_array>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2600      	movs	r6, #0
 80037f4:	4d0c      	ldr	r5, [pc, #48]	; (8003828 <__libc_init_array+0x38>)
 80037f6:	4c0d      	ldr	r4, [pc, #52]	; (800382c <__libc_init_array+0x3c>)
 80037f8:	1b64      	subs	r4, r4, r5
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	42a6      	cmp	r6, r4
 80037fe:	d109      	bne.n	8003814 <__libc_init_array+0x24>
 8003800:	f001 f82c 	bl	800485c <_init>
 8003804:	2600      	movs	r6, #0
 8003806:	4d0a      	ldr	r5, [pc, #40]	; (8003830 <__libc_init_array+0x40>)
 8003808:	4c0a      	ldr	r4, [pc, #40]	; (8003834 <__libc_init_array+0x44>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	42a6      	cmp	r6, r4
 8003810:	d105      	bne.n	800381e <__libc_init_array+0x2e>
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	f855 3b04 	ldr.w	r3, [r5], #4
 8003818:	4798      	blx	r3
 800381a:	3601      	adds	r6, #1
 800381c:	e7ee      	b.n	80037fc <__libc_init_array+0xc>
 800381e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003822:	4798      	blx	r3
 8003824:	3601      	adds	r6, #1
 8003826:	e7f2      	b.n	800380e <__libc_init_array+0x1e>
 8003828:	08004988 	.word	0x08004988
 800382c:	08004988 	.word	0x08004988
 8003830:	08004988 	.word	0x08004988
 8003834:	0800498c 	.word	0x0800498c

08003838 <memset>:
 8003838:	4603      	mov	r3, r0
 800383a:	4402      	add	r2, r0
 800383c:	4293      	cmp	r3, r2
 800383e:	d100      	bne.n	8003842 <memset+0xa>
 8003840:	4770      	bx	lr
 8003842:	f803 1b01 	strb.w	r1, [r3], #1
 8003846:	e7f9      	b.n	800383c <memset+0x4>

08003848 <iprintf>:
 8003848:	b40f      	push	{r0, r1, r2, r3}
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <iprintf+0x2c>)
 800384c:	b513      	push	{r0, r1, r4, lr}
 800384e:	681c      	ldr	r4, [r3, #0]
 8003850:	b124      	cbz	r4, 800385c <iprintf+0x14>
 8003852:	69a3      	ldr	r3, [r4, #24]
 8003854:	b913      	cbnz	r3, 800385c <iprintf+0x14>
 8003856:	4620      	mov	r0, r4
 8003858:	f000 fa5a 	bl	8003d10 <__sinit>
 800385c:	ab05      	add	r3, sp, #20
 800385e:	4620      	mov	r0, r4
 8003860:	9a04      	ldr	r2, [sp, #16]
 8003862:	68a1      	ldr	r1, [r4, #8]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	f000 fc5d 	bl	8004124 <_vfiprintf_r>
 800386a:	b002      	add	sp, #8
 800386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003870:	b004      	add	sp, #16
 8003872:	4770      	bx	lr
 8003874:	2000000c 	.word	0x2000000c

08003878 <_puts_r>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	460e      	mov	r6, r1
 800387c:	4605      	mov	r5, r0
 800387e:	b118      	cbz	r0, 8003888 <_puts_r+0x10>
 8003880:	6983      	ldr	r3, [r0, #24]
 8003882:	b90b      	cbnz	r3, 8003888 <_puts_r+0x10>
 8003884:	f000 fa44 	bl	8003d10 <__sinit>
 8003888:	69ab      	ldr	r3, [r5, #24]
 800388a:	68ac      	ldr	r4, [r5, #8]
 800388c:	b913      	cbnz	r3, 8003894 <_puts_r+0x1c>
 800388e:	4628      	mov	r0, r5
 8003890:	f000 fa3e 	bl	8003d10 <__sinit>
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <_puts_r+0xd0>)
 8003896:	429c      	cmp	r4, r3
 8003898:	d120      	bne.n	80038dc <_puts_r+0x64>
 800389a:	686c      	ldr	r4, [r5, #4]
 800389c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800389e:	07db      	lsls	r3, r3, #31
 80038a0:	d405      	bmi.n	80038ae <_puts_r+0x36>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	0598      	lsls	r0, r3, #22
 80038a6:	d402      	bmi.n	80038ae <_puts_r+0x36>
 80038a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038aa:	f000 facf 	bl	8003e4c <__retarget_lock_acquire_recursive>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	0719      	lsls	r1, r3, #28
 80038b2:	d51d      	bpl.n	80038f0 <_puts_r+0x78>
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	b1db      	cbz	r3, 80038f0 <_puts_r+0x78>
 80038b8:	3e01      	subs	r6, #1
 80038ba:	68a3      	ldr	r3, [r4, #8]
 80038bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038c0:	3b01      	subs	r3, #1
 80038c2:	60a3      	str	r3, [r4, #8]
 80038c4:	bb39      	cbnz	r1, 8003916 <_puts_r+0x9e>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da38      	bge.n	800393c <_puts_r+0xc4>
 80038ca:	4622      	mov	r2, r4
 80038cc:	210a      	movs	r1, #10
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f848 	bl	8003964 <__swbuf_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d011      	beq.n	80038fc <_puts_r+0x84>
 80038d8:	250a      	movs	r5, #10
 80038da:	e011      	b.n	8003900 <_puts_r+0x88>
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <_puts_r+0xd4>)
 80038de:	429c      	cmp	r4, r3
 80038e0:	d101      	bne.n	80038e6 <_puts_r+0x6e>
 80038e2:	68ac      	ldr	r4, [r5, #8]
 80038e4:	e7da      	b.n	800389c <_puts_r+0x24>
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <_puts_r+0xd8>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	bf08      	it	eq
 80038ec:	68ec      	ldreq	r4, [r5, #12]
 80038ee:	e7d5      	b.n	800389c <_puts_r+0x24>
 80038f0:	4621      	mov	r1, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 f888 	bl	8003a08 <__swsetup_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d0dd      	beq.n	80038b8 <_puts_r+0x40>
 80038fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003902:	07da      	lsls	r2, r3, #31
 8003904:	d405      	bmi.n	8003912 <_puts_r+0x9a>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	059b      	lsls	r3, r3, #22
 800390a:	d402      	bmi.n	8003912 <_puts_r+0x9a>
 800390c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390e:	f000 fa9e 	bl	8003e4e <__retarget_lock_release_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	2b00      	cmp	r3, #0
 8003918:	da04      	bge.n	8003924 <_puts_r+0xac>
 800391a:	69a2      	ldr	r2, [r4, #24]
 800391c:	429a      	cmp	r2, r3
 800391e:	dc06      	bgt.n	800392e <_puts_r+0xb6>
 8003920:	290a      	cmp	r1, #10
 8003922:	d004      	beq.n	800392e <_puts_r+0xb6>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	6022      	str	r2, [r4, #0]
 800392a:	7019      	strb	r1, [r3, #0]
 800392c:	e7c5      	b.n	80038ba <_puts_r+0x42>
 800392e:	4622      	mov	r2, r4
 8003930:	4628      	mov	r0, r5
 8003932:	f000 f817 	bl	8003964 <__swbuf_r>
 8003936:	3001      	adds	r0, #1
 8003938:	d1bf      	bne.n	80038ba <_puts_r+0x42>
 800393a:	e7df      	b.n	80038fc <_puts_r+0x84>
 800393c:	250a      	movs	r5, #10
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	6022      	str	r2, [r4, #0]
 8003944:	701d      	strb	r5, [r3, #0]
 8003946:	e7db      	b.n	8003900 <_puts_r+0x88>
 8003948:	08004914 	.word	0x08004914
 800394c:	08004934 	.word	0x08004934
 8003950:	080048f4 	.word	0x080048f4

08003954 <puts>:
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <puts+0xc>)
 8003956:	4601      	mov	r1, r0
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f7ff bf8d 	b.w	8003878 <_puts_r>
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c

08003964 <__swbuf_r>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	460e      	mov	r6, r1
 8003968:	4614      	mov	r4, r2
 800396a:	4605      	mov	r5, r0
 800396c:	b118      	cbz	r0, 8003976 <__swbuf_r+0x12>
 800396e:	6983      	ldr	r3, [r0, #24]
 8003970:	b90b      	cbnz	r3, 8003976 <__swbuf_r+0x12>
 8003972:	f000 f9cd 	bl	8003d10 <__sinit>
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <__swbuf_r+0x98>)
 8003978:	429c      	cmp	r4, r3
 800397a:	d12b      	bne.n	80039d4 <__swbuf_r+0x70>
 800397c:	686c      	ldr	r4, [r5, #4]
 800397e:	69a3      	ldr	r3, [r4, #24]
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	071a      	lsls	r2, r3, #28
 8003986:	d52f      	bpl.n	80039e8 <__swbuf_r+0x84>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	b36b      	cbz	r3, 80039e8 <__swbuf_r+0x84>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	b2f6      	uxtb	r6, r6
 8003992:	1ac0      	subs	r0, r0, r3
 8003994:	6963      	ldr	r3, [r4, #20]
 8003996:	4637      	mov	r7, r6
 8003998:	4283      	cmp	r3, r0
 800399a:	dc04      	bgt.n	80039a6 <__swbuf_r+0x42>
 800399c:	4621      	mov	r1, r4
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f922 	bl	8003be8 <_fflush_r>
 80039a4:	bb30      	cbnz	r0, 80039f4 <__swbuf_r+0x90>
 80039a6:	68a3      	ldr	r3, [r4, #8]
 80039a8:	3001      	adds	r0, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	701e      	strb	r6, [r3, #0]
 80039b6:	6963      	ldr	r3, [r4, #20]
 80039b8:	4283      	cmp	r3, r0
 80039ba:	d004      	beq.n	80039c6 <__swbuf_r+0x62>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	07db      	lsls	r3, r3, #31
 80039c0:	d506      	bpl.n	80039d0 <__swbuf_r+0x6c>
 80039c2:	2e0a      	cmp	r6, #10
 80039c4:	d104      	bne.n	80039d0 <__swbuf_r+0x6c>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 f90d 	bl	8003be8 <_fflush_r>
 80039ce:	b988      	cbnz	r0, 80039f4 <__swbuf_r+0x90>
 80039d0:	4638      	mov	r0, r7
 80039d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <__swbuf_r+0x9c>)
 80039d6:	429c      	cmp	r4, r3
 80039d8:	d101      	bne.n	80039de <__swbuf_r+0x7a>
 80039da:	68ac      	ldr	r4, [r5, #8]
 80039dc:	e7cf      	b.n	800397e <__swbuf_r+0x1a>
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <__swbuf_r+0xa0>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	bf08      	it	eq
 80039e4:	68ec      	ldreq	r4, [r5, #12]
 80039e6:	e7ca      	b.n	800397e <__swbuf_r+0x1a>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4628      	mov	r0, r5
 80039ec:	f000 f80c 	bl	8003a08 <__swsetup_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d0cb      	beq.n	800398c <__swbuf_r+0x28>
 80039f4:	f04f 37ff 	mov.w	r7, #4294967295
 80039f8:	e7ea      	b.n	80039d0 <__swbuf_r+0x6c>
 80039fa:	bf00      	nop
 80039fc:	08004914 	.word	0x08004914
 8003a00:	08004934 	.word	0x08004934
 8003a04:	080048f4 	.word	0x080048f4

08003a08 <__swsetup_r>:
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <__swsetup_r+0xcc>)
 8003a0a:	b570      	push	{r4, r5, r6, lr}
 8003a0c:	681d      	ldr	r5, [r3, #0]
 8003a0e:	4606      	mov	r6, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	b125      	cbz	r5, 8003a1e <__swsetup_r+0x16>
 8003a14:	69ab      	ldr	r3, [r5, #24]
 8003a16:	b913      	cbnz	r3, 8003a1e <__swsetup_r+0x16>
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f000 f979 	bl	8003d10 <__sinit>
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <__swsetup_r+0xd0>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d10f      	bne.n	8003a44 <__swsetup_r+0x3c>
 8003a24:	686c      	ldr	r4, [r5, #4]
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a2c:	0719      	lsls	r1, r3, #28
 8003a2e:	d42c      	bmi.n	8003a8a <__swsetup_r+0x82>
 8003a30:	06dd      	lsls	r5, r3, #27
 8003a32:	d411      	bmi.n	8003a58 <__swsetup_r+0x50>
 8003a34:	2309      	movs	r3, #9
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e03e      	b.n	8003ac2 <__swsetup_r+0xba>
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <__swsetup_r+0xd4>)
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d101      	bne.n	8003a4e <__swsetup_r+0x46>
 8003a4a:	68ac      	ldr	r4, [r5, #8]
 8003a4c:	e7eb      	b.n	8003a26 <__swsetup_r+0x1e>
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <__swsetup_r+0xd8>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	bf08      	it	eq
 8003a54:	68ec      	ldreq	r4, [r5, #12]
 8003a56:	e7e6      	b.n	8003a26 <__swsetup_r+0x1e>
 8003a58:	0758      	lsls	r0, r3, #29
 8003a5a:	d512      	bpl.n	8003a82 <__swsetup_r+0x7a>
 8003a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5e:	b141      	cbz	r1, 8003a72 <__swsetup_r+0x6a>
 8003a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a64:	4299      	cmp	r1, r3
 8003a66:	d002      	beq.n	8003a6e <__swsetup_r+0x66>
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 fa57 	bl	8003f1c <_free_r>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6363      	str	r3, [r4, #52]	; 0x34
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6063      	str	r3, [r4, #4]
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	b94b      	cbnz	r3, 8003aa2 <__swsetup_r+0x9a>
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a98:	d003      	beq.n	8003aa2 <__swsetup_r+0x9a>
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 f9fd 	bl	8003e9c <__smakebuf_r>
 8003aa2:	89a0      	ldrh	r0, [r4, #12]
 8003aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aa8:	f010 0301 	ands.w	r3, r0, #1
 8003aac:	d00a      	beq.n	8003ac4 <__swsetup_r+0xbc>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	6963      	ldr	r3, [r4, #20]
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	61a3      	str	r3, [r4, #24]
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	b943      	cbnz	r3, 8003ace <__swsetup_r+0xc6>
 8003abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ac0:	d1ba      	bne.n	8003a38 <__swsetup_r+0x30>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	0781      	lsls	r1, r0, #30
 8003ac6:	bf58      	it	pl
 8003ac8:	6963      	ldrpl	r3, [r4, #20]
 8003aca:	60a3      	str	r3, [r4, #8]
 8003acc:	e7f4      	b.n	8003ab8 <__swsetup_r+0xb0>
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e7f7      	b.n	8003ac2 <__swsetup_r+0xba>
 8003ad2:	bf00      	nop
 8003ad4:	2000000c 	.word	0x2000000c
 8003ad8:	08004914 	.word	0x08004914
 8003adc:	08004934 	.word	0x08004934
 8003ae0:	080048f4 	.word	0x080048f4

08003ae4 <__sflush_r>:
 8003ae4:	898a      	ldrh	r2, [r1, #12]
 8003ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae8:	4605      	mov	r5, r0
 8003aea:	0710      	lsls	r0, r2, #28
 8003aec:	460c      	mov	r4, r1
 8003aee:	d457      	bmi.n	8003ba0 <__sflush_r+0xbc>
 8003af0:	684b      	ldr	r3, [r1, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dc04      	bgt.n	8003b00 <__sflush_r+0x1c>
 8003af6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dc01      	bgt.n	8003b00 <__sflush_r+0x1c>
 8003afc:	2000      	movs	r0, #0
 8003afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b02:	2e00      	cmp	r6, #0
 8003b04:	d0fa      	beq.n	8003afc <__sflush_r+0x18>
 8003b06:	2300      	movs	r3, #0
 8003b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b0c:	682f      	ldr	r7, [r5, #0]
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	d032      	beq.n	8003b78 <__sflush_r+0x94>
 8003b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	075a      	lsls	r2, r3, #29
 8003b18:	d505      	bpl.n	8003b26 <__sflush_r+0x42>
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	1ac0      	subs	r0, r0, r3
 8003b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b20:	b10b      	cbz	r3, 8003b26 <__sflush_r+0x42>
 8003b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b24:	1ac0      	subs	r0, r0, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	6a21      	ldr	r1, [r4, #32]
 8003b30:	47b0      	blx	r6
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	d106      	bne.n	8003b46 <__sflush_r+0x62>
 8003b38:	6829      	ldr	r1, [r5, #0]
 8003b3a:	291d      	cmp	r1, #29
 8003b3c:	d82c      	bhi.n	8003b98 <__sflush_r+0xb4>
 8003b3e:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <__sflush_r+0x100>)
 8003b40:	40ca      	lsrs	r2, r1
 8003b42:	07d6      	lsls	r6, r2, #31
 8003b44:	d528      	bpl.n	8003b98 <__sflush_r+0xb4>
 8003b46:	2200      	movs	r2, #0
 8003b48:	6062      	str	r2, [r4, #4]
 8003b4a:	6922      	ldr	r2, [r4, #16]
 8003b4c:	04d9      	lsls	r1, r3, #19
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	d504      	bpl.n	8003b5c <__sflush_r+0x78>
 8003b52:	1c42      	adds	r2, r0, #1
 8003b54:	d101      	bne.n	8003b5a <__sflush_r+0x76>
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	b903      	cbnz	r3, 8003b5c <__sflush_r+0x78>
 8003b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b5e:	602f      	str	r7, [r5, #0]
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d0cb      	beq.n	8003afc <__sflush_r+0x18>
 8003b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b68:	4299      	cmp	r1, r3
 8003b6a:	d002      	beq.n	8003b72 <__sflush_r+0x8e>
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 f9d5 	bl	8003f1c <_free_r>
 8003b72:	2000      	movs	r0, #0
 8003b74:	6360      	str	r0, [r4, #52]	; 0x34
 8003b76:	e7c2      	b.n	8003afe <__sflush_r+0x1a>
 8003b78:	6a21      	ldr	r1, [r4, #32]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b0      	blx	r6
 8003b80:	1c41      	adds	r1, r0, #1
 8003b82:	d1c7      	bne.n	8003b14 <__sflush_r+0x30>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0c4      	beq.n	8003b14 <__sflush_r+0x30>
 8003b8a:	2b1d      	cmp	r3, #29
 8003b8c:	d001      	beq.n	8003b92 <__sflush_r+0xae>
 8003b8e:	2b16      	cmp	r3, #22
 8003b90:	d101      	bne.n	8003b96 <__sflush_r+0xb2>
 8003b92:	602f      	str	r7, [r5, #0]
 8003b94:	e7b2      	b.n	8003afc <__sflush_r+0x18>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9c:	81a3      	strh	r3, [r4, #12]
 8003b9e:	e7ae      	b.n	8003afe <__sflush_r+0x1a>
 8003ba0:	690f      	ldr	r7, [r1, #16]
 8003ba2:	2f00      	cmp	r7, #0
 8003ba4:	d0aa      	beq.n	8003afc <__sflush_r+0x18>
 8003ba6:	0793      	lsls	r3, r2, #30
 8003ba8:	bf18      	it	ne
 8003baa:	2300      	movne	r3, #0
 8003bac:	680e      	ldr	r6, [r1, #0]
 8003bae:	bf08      	it	eq
 8003bb0:	694b      	ldreq	r3, [r1, #20]
 8003bb2:	1bf6      	subs	r6, r6, r7
 8003bb4:	600f      	str	r7, [r1, #0]
 8003bb6:	608b      	str	r3, [r1, #8]
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	dd9f      	ble.n	8003afc <__sflush_r+0x18>
 8003bbc:	4633      	mov	r3, r6
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	6a21      	ldr	r1, [r4, #32]
 8003bc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003bc8:	47e0      	blx	ip
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	dc06      	bgt.n	8003bdc <__sflush_r+0xf8>
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	e790      	b.n	8003afe <__sflush_r+0x1a>
 8003bdc:	4407      	add	r7, r0
 8003bde:	1a36      	subs	r6, r6, r0
 8003be0:	e7ea      	b.n	8003bb8 <__sflush_r+0xd4>
 8003be2:	bf00      	nop
 8003be4:	20400001 	.word	0x20400001

08003be8 <_fflush_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	4605      	mov	r5, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	b913      	cbnz	r3, 8003bf8 <_fflush_r+0x10>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	b118      	cbz	r0, 8003c02 <_fflush_r+0x1a>
 8003bfa:	6983      	ldr	r3, [r0, #24]
 8003bfc:	b90b      	cbnz	r3, 8003c02 <_fflush_r+0x1a>
 8003bfe:	f000 f887 	bl	8003d10 <__sinit>
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <_fflush_r+0x6c>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	d11b      	bne.n	8003c40 <_fflush_r+0x58>
 8003c08:	686c      	ldr	r4, [r5, #4]
 8003c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ef      	beq.n	8003bf2 <_fflush_r+0xa>
 8003c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c14:	07d0      	lsls	r0, r2, #31
 8003c16:	d404      	bmi.n	8003c22 <_fflush_r+0x3a>
 8003c18:	0599      	lsls	r1, r3, #22
 8003c1a:	d402      	bmi.n	8003c22 <_fflush_r+0x3a>
 8003c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c1e:	f000 f915 	bl	8003e4c <__retarget_lock_acquire_recursive>
 8003c22:	4628      	mov	r0, r5
 8003c24:	4621      	mov	r1, r4
 8003c26:	f7ff ff5d 	bl	8003ae4 <__sflush_r>
 8003c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	07da      	lsls	r2, r3, #31
 8003c30:	d4e0      	bmi.n	8003bf4 <_fflush_r+0xc>
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	059b      	lsls	r3, r3, #22
 8003c36:	d4dd      	bmi.n	8003bf4 <_fflush_r+0xc>
 8003c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c3a:	f000 f908 	bl	8003e4e <__retarget_lock_release_recursive>
 8003c3e:	e7d9      	b.n	8003bf4 <_fflush_r+0xc>
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <_fflush_r+0x70>)
 8003c42:	429c      	cmp	r4, r3
 8003c44:	d101      	bne.n	8003c4a <_fflush_r+0x62>
 8003c46:	68ac      	ldr	r4, [r5, #8]
 8003c48:	e7df      	b.n	8003c0a <_fflush_r+0x22>
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <_fflush_r+0x74>)
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	bf08      	it	eq
 8003c50:	68ec      	ldreq	r4, [r5, #12]
 8003c52:	e7da      	b.n	8003c0a <_fflush_r+0x22>
 8003c54:	08004914 	.word	0x08004914
 8003c58:	08004934 	.word	0x08004934
 8003c5c:	080048f4 	.word	0x080048f4

08003c60 <std>:
 8003c60:	2300      	movs	r3, #0
 8003c62:	b510      	push	{r4, lr}
 8003c64:	4604      	mov	r4, r0
 8003c66:	e9c0 3300 	strd	r3, r3, [r0]
 8003c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c6e:	6083      	str	r3, [r0, #8]
 8003c70:	8181      	strh	r1, [r0, #12]
 8003c72:	6643      	str	r3, [r0, #100]	; 0x64
 8003c74:	81c2      	strh	r2, [r0, #14]
 8003c76:	6183      	str	r3, [r0, #24]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	305c      	adds	r0, #92	; 0x5c
 8003c7e:	f7ff fddb 	bl	8003838 <memset>
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <std+0x38>)
 8003c84:	6224      	str	r4, [r4, #32]
 8003c86:	6263      	str	r3, [r4, #36]	; 0x24
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <std+0x3c>)
 8003c8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <std+0x40>)
 8003c8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <std+0x44>)
 8003c92:	6323      	str	r3, [r4, #48]	; 0x30
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	bf00      	nop
 8003c98:	080046d1 	.word	0x080046d1
 8003c9c:	080046f3 	.word	0x080046f3
 8003ca0:	0800472b 	.word	0x0800472b
 8003ca4:	0800474f 	.word	0x0800474f

08003ca8 <_cleanup_r>:
 8003ca8:	4901      	ldr	r1, [pc, #4]	; (8003cb0 <_cleanup_r+0x8>)
 8003caa:	f000 b8af 	b.w	8003e0c <_fwalk_reent>
 8003cae:	bf00      	nop
 8003cb0:	08003be9 	.word	0x08003be9

08003cb4 <__sfmoreglue>:
 8003cb4:	2268      	movs	r2, #104	; 0x68
 8003cb6:	b570      	push	{r4, r5, r6, lr}
 8003cb8:	1e4d      	subs	r5, r1, #1
 8003cba:	4355      	muls	r5, r2
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cc2:	f000 f993 	bl	8003fec <_malloc_r>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	b140      	cbz	r0, 8003cdc <__sfmoreglue+0x28>
 8003cca:	2100      	movs	r1, #0
 8003ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8003cd0:	300c      	adds	r0, #12
 8003cd2:	60a0      	str	r0, [r4, #8]
 8003cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cd8:	f7ff fdae 	bl	8003838 <memset>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bd70      	pop	{r4, r5, r6, pc}

08003ce0 <__sfp_lock_acquire>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__sfp_lock_acquire+0x8>)
 8003ce2:	f000 b8b3 	b.w	8003e4c <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	20000225 	.word	0x20000225

08003cec <__sfp_lock_release>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__sfp_lock_release+0x8>)
 8003cee:	f000 b8ae 	b.w	8003e4e <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	20000225 	.word	0x20000225

08003cf8 <__sinit_lock_acquire>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sinit_lock_acquire+0x8>)
 8003cfa:	f000 b8a7 	b.w	8003e4c <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	20000226 	.word	0x20000226

08003d04 <__sinit_lock_release>:
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <__sinit_lock_release+0x8>)
 8003d06:	f000 b8a2 	b.w	8003e4e <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	20000226 	.word	0x20000226

08003d10 <__sinit>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	4604      	mov	r4, r0
 8003d14:	f7ff fff0 	bl	8003cf8 <__sinit_lock_acquire>
 8003d18:	69a3      	ldr	r3, [r4, #24]
 8003d1a:	b11b      	cbz	r3, 8003d24 <__sinit+0x14>
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	f7ff bff0 	b.w	8003d04 <__sinit_lock_release>
 8003d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d28:	6523      	str	r3, [r4, #80]	; 0x50
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <__sinit+0x68>)
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <__sinit+0x6c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d32:	42a3      	cmp	r3, r4
 8003d34:	bf08      	it	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	4620      	mov	r0, r4
 8003d3a:	bf08      	it	eq
 8003d3c:	61a3      	streq	r3, [r4, #24]
 8003d3e:	f000 f81f 	bl	8003d80 <__sfp>
 8003d42:	6060      	str	r0, [r4, #4]
 8003d44:	4620      	mov	r0, r4
 8003d46:	f000 f81b 	bl	8003d80 <__sfp>
 8003d4a:	60a0      	str	r0, [r4, #8]
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 f817 	bl	8003d80 <__sfp>
 8003d52:	2200      	movs	r2, #0
 8003d54:	2104      	movs	r1, #4
 8003d56:	60e0      	str	r0, [r4, #12]
 8003d58:	6860      	ldr	r0, [r4, #4]
 8003d5a:	f7ff ff81 	bl	8003c60 <std>
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2109      	movs	r1, #9
 8003d62:	68a0      	ldr	r0, [r4, #8]
 8003d64:	f7ff ff7c 	bl	8003c60 <std>
 8003d68:	2202      	movs	r2, #2
 8003d6a:	2112      	movs	r1, #18
 8003d6c:	68e0      	ldr	r0, [r4, #12]
 8003d6e:	f7ff ff77 	bl	8003c60 <std>
 8003d72:	2301      	movs	r3, #1
 8003d74:	61a3      	str	r3, [r4, #24]
 8003d76:	e7d1      	b.n	8003d1c <__sinit+0xc>
 8003d78:	080048f0 	.word	0x080048f0
 8003d7c:	08003ca9 	.word	0x08003ca9

08003d80 <__sfp>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	4607      	mov	r7, r0
 8003d84:	f7ff ffac 	bl	8003ce0 <__sfp_lock_acquire>
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <__sfp+0x84>)
 8003d8a:	681e      	ldr	r6, [r3, #0]
 8003d8c:	69b3      	ldr	r3, [r6, #24]
 8003d8e:	b913      	cbnz	r3, 8003d96 <__sfp+0x16>
 8003d90:	4630      	mov	r0, r6
 8003d92:	f7ff ffbd 	bl	8003d10 <__sinit>
 8003d96:	3648      	adds	r6, #72	; 0x48
 8003d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	d503      	bpl.n	8003da8 <__sfp+0x28>
 8003da0:	6833      	ldr	r3, [r6, #0]
 8003da2:	b30b      	cbz	r3, 8003de8 <__sfp+0x68>
 8003da4:	6836      	ldr	r6, [r6, #0]
 8003da6:	e7f7      	b.n	8003d98 <__sfp+0x18>
 8003da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dac:	b9d5      	cbnz	r5, 8003de4 <__sfp+0x64>
 8003dae:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <__sfp+0x88>)
 8003db0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003db4:	60e3      	str	r3, [r4, #12]
 8003db6:	6665      	str	r5, [r4, #100]	; 0x64
 8003db8:	f000 f847 	bl	8003e4a <__retarget_lock_init_recursive>
 8003dbc:	f7ff ff96 	bl	8003cec <__sfp_lock_release>
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dcc:	6025      	str	r5, [r4, #0]
 8003dce:	61a5      	str	r5, [r4, #24]
 8003dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dd4:	f7ff fd30 	bl	8003838 <memset>
 8003dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003de0:	4620      	mov	r0, r4
 8003de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de4:	3468      	adds	r4, #104	; 0x68
 8003de6:	e7d9      	b.n	8003d9c <__sfp+0x1c>
 8003de8:	2104      	movs	r1, #4
 8003dea:	4638      	mov	r0, r7
 8003dec:	f7ff ff62 	bl	8003cb4 <__sfmoreglue>
 8003df0:	4604      	mov	r4, r0
 8003df2:	6030      	str	r0, [r6, #0]
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d1d5      	bne.n	8003da4 <__sfp+0x24>
 8003df8:	f7ff ff78 	bl	8003cec <__sfp_lock_release>
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	e7ee      	b.n	8003de0 <__sfp+0x60>
 8003e02:	bf00      	nop
 8003e04:	080048f0 	.word	0x080048f0
 8003e08:	ffff0001 	.word	0xffff0001

08003e0c <_fwalk_reent>:
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	4606      	mov	r6, r0
 8003e12:	4688      	mov	r8, r1
 8003e14:	2700      	movs	r7, #0
 8003e16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8003e22:	d505      	bpl.n	8003e30 <_fwalk_reent+0x24>
 8003e24:	6824      	ldr	r4, [r4, #0]
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d1f7      	bne.n	8003e1a <_fwalk_reent+0xe>
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e30:	89ab      	ldrh	r3, [r5, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d907      	bls.n	8003e46 <_fwalk_reent+0x3a>
 8003e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	d003      	beq.n	8003e46 <_fwalk_reent+0x3a>
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4630      	mov	r0, r6
 8003e42:	47c0      	blx	r8
 8003e44:	4307      	orrs	r7, r0
 8003e46:	3568      	adds	r5, #104	; 0x68
 8003e48:	e7e9      	b.n	8003e1e <_fwalk_reent+0x12>

08003e4a <__retarget_lock_init_recursive>:
 8003e4a:	4770      	bx	lr

08003e4c <__retarget_lock_acquire_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_release_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <__swhatbuf_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460e      	mov	r6, r1
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	4614      	mov	r4, r2
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	461d      	mov	r5, r3
 8003e5e:	b096      	sub	sp, #88	; 0x58
 8003e60:	da08      	bge.n	8003e74 <__swhatbuf_r+0x24>
 8003e62:	2200      	movs	r2, #0
 8003e64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e68:	602a      	str	r2, [r5, #0]
 8003e6a:	061a      	lsls	r2, r3, #24
 8003e6c:	d410      	bmi.n	8003e90 <__swhatbuf_r+0x40>
 8003e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e72:	e00e      	b.n	8003e92 <__swhatbuf_r+0x42>
 8003e74:	466a      	mov	r2, sp
 8003e76:	f000 fc91 	bl	800479c <_fstat_r>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	dbf1      	blt.n	8003e62 <__swhatbuf_r+0x12>
 8003e7e:	9a01      	ldr	r2, [sp, #4]
 8003e80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e88:	425a      	negs	r2, r3
 8003e8a:	415a      	adcs	r2, r3
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	e7ee      	b.n	8003e6e <__swhatbuf_r+0x1e>
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	2000      	movs	r0, #0
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	b016      	add	sp, #88	; 0x58
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e9c <__smakebuf_r>:
 8003e9c:	898b      	ldrh	r3, [r1, #12]
 8003e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ea0:	079d      	lsls	r5, r3, #30
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	d507      	bpl.n	8003eb8 <__smakebuf_r+0x1c>
 8003ea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6163      	str	r3, [r4, #20]
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	466a      	mov	r2, sp
 8003eba:	ab01      	add	r3, sp, #4
 8003ebc:	f7ff ffc8 	bl	8003e50 <__swhatbuf_r>
 8003ec0:	9900      	ldr	r1, [sp, #0]
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f891 	bl	8003fec <_malloc_r>
 8003eca:	b948      	cbnz	r0, 8003ee0 <__smakebuf_r+0x44>
 8003ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed0:	059a      	lsls	r2, r3, #22
 8003ed2:	d4ef      	bmi.n	8003eb4 <__smakebuf_r+0x18>
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	e7e3      	b.n	8003ea8 <__smakebuf_r+0xc>
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <__smakebuf_r+0x7c>)
 8003ee2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	6020      	str	r0, [r4, #0]
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	9b00      	ldr	r3, [sp, #0]
 8003ef0:	6120      	str	r0, [r4, #16]
 8003ef2:	6163      	str	r3, [r4, #20]
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	b15b      	cbz	r3, 8003f10 <__smakebuf_r+0x74>
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003efe:	f000 fc5f 	bl	80047c0 <_isatty_r>
 8003f02:	b128      	cbz	r0, 8003f10 <__smakebuf_r+0x74>
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	81a3      	strh	r3, [r4, #12]
 8003f10:	89a0      	ldrh	r0, [r4, #12]
 8003f12:	4305      	orrs	r5, r0
 8003f14:	81a5      	strh	r5, [r4, #12]
 8003f16:	e7cd      	b.n	8003eb4 <__smakebuf_r+0x18>
 8003f18:	08003ca9 	.word	0x08003ca9

08003f1c <_free_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d040      	beq.n	8003fa6 <_free_r+0x8a>
 8003f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f28:	1f0c      	subs	r4, r1, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfb8      	it	lt
 8003f2e:	18e4      	addlt	r4, r4, r3
 8003f30:	f000 fc76 	bl	8004820 <__malloc_lock>
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <_free_r+0x8c>)
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	b933      	cbnz	r3, 8003f48 <_free_r+0x2c>
 8003f3a:	6063      	str	r3, [r4, #4]
 8003f3c:	6014      	str	r4, [r2, #0]
 8003f3e:	4628      	mov	r0, r5
 8003f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f44:	f000 bc72 	b.w	800482c <__malloc_unlock>
 8003f48:	42a3      	cmp	r3, r4
 8003f4a:	d908      	bls.n	8003f5e <_free_r+0x42>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	1821      	adds	r1, r4, r0
 8003f50:	428b      	cmp	r3, r1
 8003f52:	bf01      	itttt	eq
 8003f54:	6819      	ldreq	r1, [r3, #0]
 8003f56:	685b      	ldreq	r3, [r3, #4]
 8003f58:	1809      	addeq	r1, r1, r0
 8003f5a:	6021      	streq	r1, [r4, #0]
 8003f5c:	e7ed      	b.n	8003f3a <_free_r+0x1e>
 8003f5e:	461a      	mov	r2, r3
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b10b      	cbz	r3, 8003f68 <_free_r+0x4c>
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	d9fa      	bls.n	8003f5e <_free_r+0x42>
 8003f68:	6811      	ldr	r1, [r2, #0]
 8003f6a:	1850      	adds	r0, r2, r1
 8003f6c:	42a0      	cmp	r0, r4
 8003f6e:	d10b      	bne.n	8003f88 <_free_r+0x6c>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	4401      	add	r1, r0
 8003f74:	1850      	adds	r0, r2, r1
 8003f76:	4283      	cmp	r3, r0
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	d1e0      	bne.n	8003f3e <_free_r+0x22>
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4401      	add	r1, r0
 8003f82:	6011      	str	r1, [r2, #0]
 8003f84:	6053      	str	r3, [r2, #4]
 8003f86:	e7da      	b.n	8003f3e <_free_r+0x22>
 8003f88:	d902      	bls.n	8003f90 <_free_r+0x74>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	602b      	str	r3, [r5, #0]
 8003f8e:	e7d6      	b.n	8003f3e <_free_r+0x22>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	1821      	adds	r1, r4, r0
 8003f94:	428b      	cmp	r3, r1
 8003f96:	bf01      	itttt	eq
 8003f98:	6819      	ldreq	r1, [r3, #0]
 8003f9a:	685b      	ldreq	r3, [r3, #4]
 8003f9c:	1809      	addeq	r1, r1, r0
 8003f9e:	6021      	streq	r1, [r4, #0]
 8003fa0:	6063      	str	r3, [r4, #4]
 8003fa2:	6054      	str	r4, [r2, #4]
 8003fa4:	e7cb      	b.n	8003f3e <_free_r+0x22>
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000228 	.word	0x20000228

08003fac <sbrk_aligned>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4e0e      	ldr	r6, [pc, #56]	; (8003fe8 <sbrk_aligned+0x3c>)
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	6831      	ldr	r1, [r6, #0]
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	b911      	cbnz	r1, 8003fbe <sbrk_aligned+0x12>
 8003fb8:	f000 fb7a 	bl	80046b0 <_sbrk_r>
 8003fbc:	6030      	str	r0, [r6, #0]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 fb75 	bl	80046b0 <_sbrk_r>
 8003fc6:	1c43      	adds	r3, r0, #1
 8003fc8:	d00a      	beq.n	8003fe0 <sbrk_aligned+0x34>
 8003fca:	1cc4      	adds	r4, r0, #3
 8003fcc:	f024 0403 	bic.w	r4, r4, #3
 8003fd0:	42a0      	cmp	r0, r4
 8003fd2:	d007      	beq.n	8003fe4 <sbrk_aligned+0x38>
 8003fd4:	1a21      	subs	r1, r4, r0
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fb6a 	bl	80046b0 <_sbrk_r>
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d101      	bne.n	8003fe4 <sbrk_aligned+0x38>
 8003fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	2000022c 	.word	0x2000022c

08003fec <_malloc_r>:
 8003fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff0:	1ccd      	adds	r5, r1, #3
 8003ff2:	f025 0503 	bic.w	r5, r5, #3
 8003ff6:	3508      	adds	r5, #8
 8003ff8:	2d0c      	cmp	r5, #12
 8003ffa:	bf38      	it	cc
 8003ffc:	250c      	movcc	r5, #12
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	4607      	mov	r7, r0
 8004002:	db01      	blt.n	8004008 <_malloc_r+0x1c>
 8004004:	42a9      	cmp	r1, r5
 8004006:	d905      	bls.n	8004014 <_malloc_r+0x28>
 8004008:	230c      	movs	r3, #12
 800400a:	2600      	movs	r6, #0
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4630      	mov	r0, r6
 8004010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004014:	4e2e      	ldr	r6, [pc, #184]	; (80040d0 <_malloc_r+0xe4>)
 8004016:	f000 fc03 	bl	8004820 <__malloc_lock>
 800401a:	6833      	ldr	r3, [r6, #0]
 800401c:	461c      	mov	r4, r3
 800401e:	bb34      	cbnz	r4, 800406e <_malloc_r+0x82>
 8004020:	4629      	mov	r1, r5
 8004022:	4638      	mov	r0, r7
 8004024:	f7ff ffc2 	bl	8003fac <sbrk_aligned>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	4604      	mov	r4, r0
 800402c:	d14d      	bne.n	80040ca <_malloc_r+0xde>
 800402e:	6834      	ldr	r4, [r6, #0]
 8004030:	4626      	mov	r6, r4
 8004032:	2e00      	cmp	r6, #0
 8004034:	d140      	bne.n	80040b8 <_malloc_r+0xcc>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	4631      	mov	r1, r6
 800403a:	4638      	mov	r0, r7
 800403c:	eb04 0803 	add.w	r8, r4, r3
 8004040:	f000 fb36 	bl	80046b0 <_sbrk_r>
 8004044:	4580      	cmp	r8, r0
 8004046:	d13a      	bne.n	80040be <_malloc_r+0xd2>
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	3503      	adds	r5, #3
 800404c:	1a6d      	subs	r5, r5, r1
 800404e:	f025 0503 	bic.w	r5, r5, #3
 8004052:	3508      	adds	r5, #8
 8004054:	2d0c      	cmp	r5, #12
 8004056:	bf38      	it	cc
 8004058:	250c      	movcc	r5, #12
 800405a:	4638      	mov	r0, r7
 800405c:	4629      	mov	r1, r5
 800405e:	f7ff ffa5 	bl	8003fac <sbrk_aligned>
 8004062:	3001      	adds	r0, #1
 8004064:	d02b      	beq.n	80040be <_malloc_r+0xd2>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	442b      	add	r3, r5
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	e00e      	b.n	800408c <_malloc_r+0xa0>
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	1b52      	subs	r2, r2, r5
 8004072:	d41e      	bmi.n	80040b2 <_malloc_r+0xc6>
 8004074:	2a0b      	cmp	r2, #11
 8004076:	d916      	bls.n	80040a6 <_malloc_r+0xba>
 8004078:	1961      	adds	r1, r4, r5
 800407a:	42a3      	cmp	r3, r4
 800407c:	6025      	str	r5, [r4, #0]
 800407e:	bf18      	it	ne
 8004080:	6059      	strne	r1, [r3, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	bf08      	it	eq
 8004086:	6031      	streq	r1, [r6, #0]
 8004088:	5162      	str	r2, [r4, r5]
 800408a:	604b      	str	r3, [r1, #4]
 800408c:	4638      	mov	r0, r7
 800408e:	f104 060b 	add.w	r6, r4, #11
 8004092:	f000 fbcb 	bl	800482c <__malloc_unlock>
 8004096:	f026 0607 	bic.w	r6, r6, #7
 800409a:	1d23      	adds	r3, r4, #4
 800409c:	1af2      	subs	r2, r6, r3
 800409e:	d0b6      	beq.n	800400e <_malloc_r+0x22>
 80040a0:	1b9b      	subs	r3, r3, r6
 80040a2:	50a3      	str	r3, [r4, r2]
 80040a4:	e7b3      	b.n	800400e <_malloc_r+0x22>
 80040a6:	6862      	ldr	r2, [r4, #4]
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	bf0c      	ite	eq
 80040ac:	6032      	streq	r2, [r6, #0]
 80040ae:	605a      	strne	r2, [r3, #4]
 80040b0:	e7ec      	b.n	800408c <_malloc_r+0xa0>
 80040b2:	4623      	mov	r3, r4
 80040b4:	6864      	ldr	r4, [r4, #4]
 80040b6:	e7b2      	b.n	800401e <_malloc_r+0x32>
 80040b8:	4634      	mov	r4, r6
 80040ba:	6876      	ldr	r6, [r6, #4]
 80040bc:	e7b9      	b.n	8004032 <_malloc_r+0x46>
 80040be:	230c      	movs	r3, #12
 80040c0:	4638      	mov	r0, r7
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	f000 fbb2 	bl	800482c <__malloc_unlock>
 80040c8:	e7a1      	b.n	800400e <_malloc_r+0x22>
 80040ca:	6025      	str	r5, [r4, #0]
 80040cc:	e7de      	b.n	800408c <_malloc_r+0xa0>
 80040ce:	bf00      	nop
 80040d0:	20000228 	.word	0x20000228

080040d4 <__sfputc_r>:
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	b410      	push	{r4}
 80040d8:	3b01      	subs	r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	da07      	bge.n	80040f0 <__sfputc_r+0x1c>
 80040e0:	6994      	ldr	r4, [r2, #24]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	db01      	blt.n	80040ea <__sfputc_r+0x16>
 80040e6:	290a      	cmp	r1, #10
 80040e8:	d102      	bne.n	80040f0 <__sfputc_r+0x1c>
 80040ea:	bc10      	pop	{r4}
 80040ec:	f7ff bc3a 	b.w	8003964 <__swbuf_r>
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	1c58      	adds	r0, r3, #1
 80040f4:	6010      	str	r0, [r2, #0]
 80040f6:	7019      	strb	r1, [r3, #0]
 80040f8:	4608      	mov	r0, r1
 80040fa:	bc10      	pop	{r4}
 80040fc:	4770      	bx	lr

080040fe <__sfputs_r>:
 80040fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004100:	4606      	mov	r6, r0
 8004102:	460f      	mov	r7, r1
 8004104:	4614      	mov	r4, r2
 8004106:	18d5      	adds	r5, r2, r3
 8004108:	42ac      	cmp	r4, r5
 800410a:	d101      	bne.n	8004110 <__sfputs_r+0x12>
 800410c:	2000      	movs	r0, #0
 800410e:	e007      	b.n	8004120 <__sfputs_r+0x22>
 8004110:	463a      	mov	r2, r7
 8004112:	4630      	mov	r0, r6
 8004114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004118:	f7ff ffdc 	bl	80040d4 <__sfputc_r>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d1f3      	bne.n	8004108 <__sfputs_r+0xa>
 8004120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004124 <_vfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	460d      	mov	r5, r1
 800412a:	4614      	mov	r4, r2
 800412c:	4698      	mov	r8, r3
 800412e:	4606      	mov	r6, r0
 8004130:	b09d      	sub	sp, #116	; 0x74
 8004132:	b118      	cbz	r0, 800413c <_vfiprintf_r+0x18>
 8004134:	6983      	ldr	r3, [r0, #24]
 8004136:	b90b      	cbnz	r3, 800413c <_vfiprintf_r+0x18>
 8004138:	f7ff fdea 	bl	8003d10 <__sinit>
 800413c:	4b89      	ldr	r3, [pc, #548]	; (8004364 <_vfiprintf_r+0x240>)
 800413e:	429d      	cmp	r5, r3
 8004140:	d11b      	bne.n	800417a <_vfiprintf_r+0x56>
 8004142:	6875      	ldr	r5, [r6, #4]
 8004144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004146:	07d9      	lsls	r1, r3, #31
 8004148:	d405      	bmi.n	8004156 <_vfiprintf_r+0x32>
 800414a:	89ab      	ldrh	r3, [r5, #12]
 800414c:	059a      	lsls	r2, r3, #22
 800414e:	d402      	bmi.n	8004156 <_vfiprintf_r+0x32>
 8004150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004152:	f7ff fe7b 	bl	8003e4c <__retarget_lock_acquire_recursive>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	d501      	bpl.n	8004160 <_vfiprintf_r+0x3c>
 800415c:	692b      	ldr	r3, [r5, #16]
 800415e:	b9eb      	cbnz	r3, 800419c <_vfiprintf_r+0x78>
 8004160:	4629      	mov	r1, r5
 8004162:	4630      	mov	r0, r6
 8004164:	f7ff fc50 	bl	8003a08 <__swsetup_r>
 8004168:	b1c0      	cbz	r0, 800419c <_vfiprintf_r+0x78>
 800416a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800416c:	07dc      	lsls	r4, r3, #31
 800416e:	d50e      	bpl.n	800418e <_vfiprintf_r+0x6a>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	b01d      	add	sp, #116	; 0x74
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <_vfiprintf_r+0x244>)
 800417c:	429d      	cmp	r5, r3
 800417e:	d101      	bne.n	8004184 <_vfiprintf_r+0x60>
 8004180:	68b5      	ldr	r5, [r6, #8]
 8004182:	e7df      	b.n	8004144 <_vfiprintf_r+0x20>
 8004184:	4b79      	ldr	r3, [pc, #484]	; (800436c <_vfiprintf_r+0x248>)
 8004186:	429d      	cmp	r5, r3
 8004188:	bf08      	it	eq
 800418a:	68f5      	ldreq	r5, [r6, #12]
 800418c:	e7da      	b.n	8004144 <_vfiprintf_r+0x20>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	0598      	lsls	r0, r3, #22
 8004192:	d4ed      	bmi.n	8004170 <_vfiprintf_r+0x4c>
 8004194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004196:	f7ff fe5a 	bl	8003e4e <__retarget_lock_release_recursive>
 800419a:	e7e9      	b.n	8004170 <_vfiprintf_r+0x4c>
 800419c:	2300      	movs	r3, #0
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	2320      	movs	r3, #32
 80041a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a6:	2330      	movs	r3, #48	; 0x30
 80041a8:	f04f 0901 	mov.w	r9, #1
 80041ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004370 <_vfiprintf_r+0x24c>
 80041b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b8:	4623      	mov	r3, r4
 80041ba:	469a      	mov	sl, r3
 80041bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c0:	b10a      	cbz	r2, 80041c6 <_vfiprintf_r+0xa2>
 80041c2:	2a25      	cmp	r2, #37	; 0x25
 80041c4:	d1f9      	bne.n	80041ba <_vfiprintf_r+0x96>
 80041c6:	ebba 0b04 	subs.w	fp, sl, r4
 80041ca:	d00b      	beq.n	80041e4 <_vfiprintf_r+0xc0>
 80041cc:	465b      	mov	r3, fp
 80041ce:	4622      	mov	r2, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	4630      	mov	r0, r6
 80041d4:	f7ff ff93 	bl	80040fe <__sfputs_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	f000 80aa 	beq.w	8004332 <_vfiprintf_r+0x20e>
 80041de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e0:	445a      	add	r2, fp
 80041e2:	9209      	str	r2, [sp, #36]	; 0x24
 80041e4:	f89a 3000 	ldrb.w	r3, [sl]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a2 	beq.w	8004332 <_vfiprintf_r+0x20e>
 80041ee:	2300      	movs	r3, #0
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f8:	f10a 0a01 	add.w	sl, sl, #1
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	9307      	str	r3, [sp, #28]
 8004200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004204:	931a      	str	r3, [sp, #104]	; 0x68
 8004206:	4654      	mov	r4, sl
 8004208:	2205      	movs	r2, #5
 800420a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420e:	4858      	ldr	r0, [pc, #352]	; (8004370 <_vfiprintf_r+0x24c>)
 8004210:	f000 faf8 	bl	8004804 <memchr>
 8004214:	9a04      	ldr	r2, [sp, #16]
 8004216:	b9d8      	cbnz	r0, 8004250 <_vfiprintf_r+0x12c>
 8004218:	06d1      	lsls	r1, r2, #27
 800421a:	bf44      	itt	mi
 800421c:	2320      	movmi	r3, #32
 800421e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004222:	0713      	lsls	r3, r2, #28
 8004224:	bf44      	itt	mi
 8004226:	232b      	movmi	r3, #43	; 0x2b
 8004228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422c:	f89a 3000 	ldrb.w	r3, [sl]
 8004230:	2b2a      	cmp	r3, #42	; 0x2a
 8004232:	d015      	beq.n	8004260 <_vfiprintf_r+0x13c>
 8004234:	4654      	mov	r4, sl
 8004236:	2000      	movs	r0, #0
 8004238:	f04f 0c0a 	mov.w	ip, #10
 800423c:	9a07      	ldr	r2, [sp, #28]
 800423e:	4621      	mov	r1, r4
 8004240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004244:	3b30      	subs	r3, #48	; 0x30
 8004246:	2b09      	cmp	r3, #9
 8004248:	d94e      	bls.n	80042e8 <_vfiprintf_r+0x1c4>
 800424a:	b1b0      	cbz	r0, 800427a <_vfiprintf_r+0x156>
 800424c:	9207      	str	r2, [sp, #28]
 800424e:	e014      	b.n	800427a <_vfiprintf_r+0x156>
 8004250:	eba0 0308 	sub.w	r3, r0, r8
 8004254:	fa09 f303 	lsl.w	r3, r9, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	46a2      	mov	sl, r4
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	e7d2      	b.n	8004206 <_vfiprintf_r+0xe2>
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	1d19      	adds	r1, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9103      	str	r1, [sp, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	bfbb      	ittet	lt
 800426c:	425b      	neglt	r3, r3
 800426e:	f042 0202 	orrlt.w	r2, r2, #2
 8004272:	9307      	strge	r3, [sp, #28]
 8004274:	9307      	strlt	r3, [sp, #28]
 8004276:	bfb8      	it	lt
 8004278:	9204      	strlt	r2, [sp, #16]
 800427a:	7823      	ldrb	r3, [r4, #0]
 800427c:	2b2e      	cmp	r3, #46	; 0x2e
 800427e:	d10c      	bne.n	800429a <_vfiprintf_r+0x176>
 8004280:	7863      	ldrb	r3, [r4, #1]
 8004282:	2b2a      	cmp	r3, #42	; 0x2a
 8004284:	d135      	bne.n	80042f2 <_vfiprintf_r+0x1ce>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	3402      	adds	r4, #2
 800428a:	1d1a      	adds	r2, r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	9203      	str	r2, [sp, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfb8      	it	lt
 8004294:	f04f 33ff 	movlt.w	r3, #4294967295
 8004298:	9305      	str	r3, [sp, #20]
 800429a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004374 <_vfiprintf_r+0x250>
 800429e:	2203      	movs	r2, #3
 80042a0:	4650      	mov	r0, sl
 80042a2:	7821      	ldrb	r1, [r4, #0]
 80042a4:	f000 faae 	bl	8004804 <memchr>
 80042a8:	b140      	cbz	r0, 80042bc <_vfiprintf_r+0x198>
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	eba0 000a 	sub.w	r0, r0, sl
 80042b0:	fa03 f000 	lsl.w	r0, r3, r0
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	3401      	adds	r4, #1
 80042b8:	4303      	orrs	r3, r0
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	2206      	movs	r2, #6
 80042c2:	482d      	ldr	r0, [pc, #180]	; (8004378 <_vfiprintf_r+0x254>)
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c8:	f000 fa9c 	bl	8004804 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d03f      	beq.n	8004350 <_vfiprintf_r+0x22c>
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <_vfiprintf_r+0x258>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_vfiprintf_r+0x1f8>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	443b      	add	r3, r7
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e767      	b.n	80041b8 <_vfiprintf_r+0x94>
 80042e8:	460c      	mov	r4, r1
 80042ea:	2001      	movs	r0, #1
 80042ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f0:	e7a5      	b.n	800423e <_vfiprintf_r+0x11a>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f04f 0c0a 	mov.w	ip, #10
 80042f8:	4619      	mov	r1, r3
 80042fa:	3401      	adds	r4, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_vfiprintf_r+0x1ee>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c5      	beq.n	800429a <_vfiprintf_r+0x176>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c3      	b.n	800429a <_vfiprintf_r+0x176>
 8004312:	4604      	mov	r4, r0
 8004314:	2301      	movs	r3, #1
 8004316:	fb0c 2101 	mla	r1, ip, r1, r2
 800431a:	e7f0      	b.n	80042fe <_vfiprintf_r+0x1da>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4630      	mov	r0, r6
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <_vfiprintf_r+0x25c>)
 8004326:	a904      	add	r1, sp, #16
 8004328:	f3af 8000 	nop.w
 800432c:	4607      	mov	r7, r0
 800432e:	1c78      	adds	r0, r7, #1
 8004330:	d1d6      	bne.n	80042e0 <_vfiprintf_r+0x1bc>
 8004332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004334:	07d9      	lsls	r1, r3, #31
 8004336:	d405      	bmi.n	8004344 <_vfiprintf_r+0x220>
 8004338:	89ab      	ldrh	r3, [r5, #12]
 800433a:	059a      	lsls	r2, r3, #22
 800433c:	d402      	bmi.n	8004344 <_vfiprintf_r+0x220>
 800433e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004340:	f7ff fd85 	bl	8003e4e <__retarget_lock_release_recursive>
 8004344:	89ab      	ldrh	r3, [r5, #12]
 8004346:	065b      	lsls	r3, r3, #25
 8004348:	f53f af12 	bmi.w	8004170 <_vfiprintf_r+0x4c>
 800434c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800434e:	e711      	b.n	8004174 <_vfiprintf_r+0x50>
 8004350:	ab03      	add	r3, sp, #12
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	462a      	mov	r2, r5
 8004356:	4630      	mov	r0, r6
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <_vfiprintf_r+0x25c>)
 800435a:	a904      	add	r1, sp, #16
 800435c:	f000 f882 	bl	8004464 <_printf_i>
 8004360:	e7e4      	b.n	800432c <_vfiprintf_r+0x208>
 8004362:	bf00      	nop
 8004364:	08004914 	.word	0x08004914
 8004368:	08004934 	.word	0x08004934
 800436c:	080048f4 	.word	0x080048f4
 8004370:	08004954 	.word	0x08004954
 8004374:	0800495a 	.word	0x0800495a
 8004378:	0800495e 	.word	0x0800495e
 800437c:	00000000 	.word	0x00000000
 8004380:	080040ff 	.word	0x080040ff

08004384 <_printf_common>:
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	4616      	mov	r6, r2
 800438a:	4699      	mov	r9, r3
 800438c:	688a      	ldr	r2, [r1, #8]
 800438e:	690b      	ldr	r3, [r1, #16]
 8004390:	4607      	mov	r7, r0
 8004392:	4293      	cmp	r3, r2
 8004394:	bfb8      	it	lt
 8004396:	4613      	movlt	r3, r2
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800439e:	460c      	mov	r4, r1
 80043a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a4:	b10a      	cbz	r2, 80043aa <_printf_common+0x26>
 80043a6:	3301      	adds	r3, #1
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	0699      	lsls	r1, r3, #26
 80043ae:	bf42      	ittt	mi
 80043b0:	6833      	ldrmi	r3, [r6, #0]
 80043b2:	3302      	addmi	r3, #2
 80043b4:	6033      	strmi	r3, [r6, #0]
 80043b6:	6825      	ldr	r5, [r4, #0]
 80043b8:	f015 0506 	ands.w	r5, r5, #6
 80043bc:	d106      	bne.n	80043cc <_printf_common+0x48>
 80043be:	f104 0a19 	add.w	sl, r4, #25
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	6832      	ldr	r2, [r6, #0]
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dc28      	bgt.n	800441e <_printf_common+0x9a>
 80043cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043d0:	1e13      	subs	r3, r2, #0
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	bf18      	it	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	0692      	lsls	r2, r2, #26
 80043da:	d42d      	bmi.n	8004438 <_printf_common+0xb4>
 80043dc:	4649      	mov	r1, r9
 80043de:	4638      	mov	r0, r7
 80043e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e4:	47c0      	blx	r8
 80043e6:	3001      	adds	r0, #1
 80043e8:	d020      	beq.n	800442c <_printf_common+0xa8>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	68e5      	ldr	r5, [r4, #12]
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	bf18      	it	ne
 80043f6:	2500      	movne	r5, #0
 80043f8:	6832      	ldr	r2, [r6, #0]
 80043fa:	f04f 0600 	mov.w	r6, #0
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	bf08      	it	eq
 8004402:	1aad      	subeq	r5, r5, r2
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	bf08      	it	eq
 8004408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800440c:	4293      	cmp	r3, r2
 800440e:	bfc4      	itt	gt
 8004410:	1a9b      	subgt	r3, r3, r2
 8004412:	18ed      	addgt	r5, r5, r3
 8004414:	341a      	adds	r4, #26
 8004416:	42b5      	cmp	r5, r6
 8004418:	d11a      	bne.n	8004450 <_printf_common+0xcc>
 800441a:	2000      	movs	r0, #0
 800441c:	e008      	b.n	8004430 <_printf_common+0xac>
 800441e:	2301      	movs	r3, #1
 8004420:	4652      	mov	r2, sl
 8004422:	4649      	mov	r1, r9
 8004424:	4638      	mov	r0, r7
 8004426:	47c0      	blx	r8
 8004428:	3001      	adds	r0, #1
 800442a:	d103      	bne.n	8004434 <_printf_common+0xb0>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004434:	3501      	adds	r5, #1
 8004436:	e7c4      	b.n	80043c2 <_printf_common+0x3e>
 8004438:	2030      	movs	r0, #48	; 0x30
 800443a:	18e1      	adds	r1, r4, r3
 800443c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004446:	4422      	add	r2, r4
 8004448:	3302      	adds	r3, #2
 800444a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800444e:	e7c5      	b.n	80043dc <_printf_common+0x58>
 8004450:	2301      	movs	r3, #1
 8004452:	4622      	mov	r2, r4
 8004454:	4649      	mov	r1, r9
 8004456:	4638      	mov	r0, r7
 8004458:	47c0      	blx	r8
 800445a:	3001      	adds	r0, #1
 800445c:	d0e6      	beq.n	800442c <_printf_common+0xa8>
 800445e:	3601      	adds	r6, #1
 8004460:	e7d9      	b.n	8004416 <_printf_common+0x92>
	...

08004464 <_printf_i>:
 8004464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	7e0f      	ldrb	r7, [r1, #24]
 800446a:	4691      	mov	r9, r2
 800446c:	2f78      	cmp	r7, #120	; 0x78
 800446e:	4680      	mov	r8, r0
 8004470:	460c      	mov	r4, r1
 8004472:	469a      	mov	sl, r3
 8004474:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800447a:	d807      	bhi.n	800448c <_printf_i+0x28>
 800447c:	2f62      	cmp	r7, #98	; 0x62
 800447e:	d80a      	bhi.n	8004496 <_printf_i+0x32>
 8004480:	2f00      	cmp	r7, #0
 8004482:	f000 80d9 	beq.w	8004638 <_printf_i+0x1d4>
 8004486:	2f58      	cmp	r7, #88	; 0x58
 8004488:	f000 80a4 	beq.w	80045d4 <_printf_i+0x170>
 800448c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004494:	e03a      	b.n	800450c <_printf_i+0xa8>
 8004496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800449a:	2b15      	cmp	r3, #21
 800449c:	d8f6      	bhi.n	800448c <_printf_i+0x28>
 800449e:	a101      	add	r1, pc, #4	; (adr r1, 80044a4 <_printf_i+0x40>)
 80044a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044a4:	080044fd 	.word	0x080044fd
 80044a8:	08004511 	.word	0x08004511
 80044ac:	0800448d 	.word	0x0800448d
 80044b0:	0800448d 	.word	0x0800448d
 80044b4:	0800448d 	.word	0x0800448d
 80044b8:	0800448d 	.word	0x0800448d
 80044bc:	08004511 	.word	0x08004511
 80044c0:	0800448d 	.word	0x0800448d
 80044c4:	0800448d 	.word	0x0800448d
 80044c8:	0800448d 	.word	0x0800448d
 80044cc:	0800448d 	.word	0x0800448d
 80044d0:	0800461f 	.word	0x0800461f
 80044d4:	08004541 	.word	0x08004541
 80044d8:	08004601 	.word	0x08004601
 80044dc:	0800448d 	.word	0x0800448d
 80044e0:	0800448d 	.word	0x0800448d
 80044e4:	08004641 	.word	0x08004641
 80044e8:	0800448d 	.word	0x0800448d
 80044ec:	08004541 	.word	0x08004541
 80044f0:	0800448d 	.word	0x0800448d
 80044f4:	0800448d 	.word	0x0800448d
 80044f8:	08004609 	.word	0x08004609
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	602a      	str	r2, [r5, #0]
 8004504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800450c:	2301      	movs	r3, #1
 800450e:	e0a4      	b.n	800465a <_printf_i+0x1f6>
 8004510:	6820      	ldr	r0, [r4, #0]
 8004512:	6829      	ldr	r1, [r5, #0]
 8004514:	0606      	lsls	r6, r0, #24
 8004516:	f101 0304 	add.w	r3, r1, #4
 800451a:	d50a      	bpl.n	8004532 <_printf_i+0xce>
 800451c:	680e      	ldr	r6, [r1, #0]
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	2e00      	cmp	r6, #0
 8004522:	da03      	bge.n	800452c <_printf_i+0xc8>
 8004524:	232d      	movs	r3, #45	; 0x2d
 8004526:	4276      	negs	r6, r6
 8004528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452c:	230a      	movs	r3, #10
 800452e:	485e      	ldr	r0, [pc, #376]	; (80046a8 <_printf_i+0x244>)
 8004530:	e019      	b.n	8004566 <_printf_i+0x102>
 8004532:	680e      	ldr	r6, [r1, #0]
 8004534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	bf18      	it	ne
 800453c:	b236      	sxthne	r6, r6
 800453e:	e7ef      	b.n	8004520 <_printf_i+0xbc>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	1d19      	adds	r1, r3, #4
 8004546:	6029      	str	r1, [r5, #0]
 8004548:	0601      	lsls	r1, r0, #24
 800454a:	d501      	bpl.n	8004550 <_printf_i+0xec>
 800454c:	681e      	ldr	r6, [r3, #0]
 800454e:	e002      	b.n	8004556 <_printf_i+0xf2>
 8004550:	0646      	lsls	r6, r0, #25
 8004552:	d5fb      	bpl.n	800454c <_printf_i+0xe8>
 8004554:	881e      	ldrh	r6, [r3, #0]
 8004556:	2f6f      	cmp	r7, #111	; 0x6f
 8004558:	bf0c      	ite	eq
 800455a:	2308      	moveq	r3, #8
 800455c:	230a      	movne	r3, #10
 800455e:	4852      	ldr	r0, [pc, #328]	; (80046a8 <_printf_i+0x244>)
 8004560:	2100      	movs	r1, #0
 8004562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004566:	6865      	ldr	r5, [r4, #4]
 8004568:	2d00      	cmp	r5, #0
 800456a:	bfa8      	it	ge
 800456c:	6821      	ldrge	r1, [r4, #0]
 800456e:	60a5      	str	r5, [r4, #8]
 8004570:	bfa4      	itt	ge
 8004572:	f021 0104 	bicge.w	r1, r1, #4
 8004576:	6021      	strge	r1, [r4, #0]
 8004578:	b90e      	cbnz	r6, 800457e <_printf_i+0x11a>
 800457a:	2d00      	cmp	r5, #0
 800457c:	d04d      	beq.n	800461a <_printf_i+0x1b6>
 800457e:	4615      	mov	r5, r2
 8004580:	fbb6 f1f3 	udiv	r1, r6, r3
 8004584:	fb03 6711 	mls	r7, r3, r1, r6
 8004588:	5dc7      	ldrb	r7, [r0, r7]
 800458a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800458e:	4637      	mov	r7, r6
 8004590:	42bb      	cmp	r3, r7
 8004592:	460e      	mov	r6, r1
 8004594:	d9f4      	bls.n	8004580 <_printf_i+0x11c>
 8004596:	2b08      	cmp	r3, #8
 8004598:	d10b      	bne.n	80045b2 <_printf_i+0x14e>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	07de      	lsls	r6, r3, #31
 800459e:	d508      	bpl.n	80045b2 <_printf_i+0x14e>
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	6861      	ldr	r1, [r4, #4]
 80045a4:	4299      	cmp	r1, r3
 80045a6:	bfde      	ittt	le
 80045a8:	2330      	movle	r3, #48	; 0x30
 80045aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045b2:	1b52      	subs	r2, r2, r5
 80045b4:	6122      	str	r2, [r4, #16]
 80045b6:	464b      	mov	r3, r9
 80045b8:	4621      	mov	r1, r4
 80045ba:	4640      	mov	r0, r8
 80045bc:	f8cd a000 	str.w	sl, [sp]
 80045c0:	aa03      	add	r2, sp, #12
 80045c2:	f7ff fedf 	bl	8004384 <_printf_common>
 80045c6:	3001      	adds	r0, #1
 80045c8:	d14c      	bne.n	8004664 <_printf_i+0x200>
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295
 80045ce:	b004      	add	sp, #16
 80045d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d4:	4834      	ldr	r0, [pc, #208]	; (80046a8 <_printf_i+0x244>)
 80045d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045da:	6829      	ldr	r1, [r5, #0]
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	f851 6b04 	ldr.w	r6, [r1], #4
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	061d      	lsls	r5, r3, #24
 80045e6:	d514      	bpl.n	8004612 <_printf_i+0x1ae>
 80045e8:	07df      	lsls	r7, r3, #31
 80045ea:	bf44      	itt	mi
 80045ec:	f043 0320 	orrmi.w	r3, r3, #32
 80045f0:	6023      	strmi	r3, [r4, #0]
 80045f2:	b91e      	cbnz	r6, 80045fc <_printf_i+0x198>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	f023 0320 	bic.w	r3, r3, #32
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	2310      	movs	r3, #16
 80045fe:	e7af      	b.n	8004560 <_printf_i+0xfc>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	f043 0320 	orr.w	r3, r3, #32
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	2378      	movs	r3, #120	; 0x78
 800460a:	4828      	ldr	r0, [pc, #160]	; (80046ac <_printf_i+0x248>)
 800460c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004610:	e7e3      	b.n	80045da <_printf_i+0x176>
 8004612:	0659      	lsls	r1, r3, #25
 8004614:	bf48      	it	mi
 8004616:	b2b6      	uxthmi	r6, r6
 8004618:	e7e6      	b.n	80045e8 <_printf_i+0x184>
 800461a:	4615      	mov	r5, r2
 800461c:	e7bb      	b.n	8004596 <_printf_i+0x132>
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	6826      	ldr	r6, [r4, #0]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6961      	ldr	r1, [r4, #20]
 8004626:	6028      	str	r0, [r5, #0]
 8004628:	0635      	lsls	r5, r6, #24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	d501      	bpl.n	8004632 <_printf_i+0x1ce>
 800462e:	6019      	str	r1, [r3, #0]
 8004630:	e002      	b.n	8004638 <_printf_i+0x1d4>
 8004632:	0670      	lsls	r0, r6, #25
 8004634:	d5fb      	bpl.n	800462e <_printf_i+0x1ca>
 8004636:	8019      	strh	r1, [r3, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	4615      	mov	r5, r2
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	e7ba      	b.n	80045b6 <_printf_i+0x152>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	602a      	str	r2, [r5, #0]
 8004648:	681d      	ldr	r5, [r3, #0]
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	4628      	mov	r0, r5
 800464e:	f000 f8d9 	bl	8004804 <memchr>
 8004652:	b108      	cbz	r0, 8004658 <_printf_i+0x1f4>
 8004654:	1b40      	subs	r0, r0, r5
 8004656:	6060      	str	r0, [r4, #4]
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	2300      	movs	r3, #0
 800465e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004662:	e7a8      	b.n	80045b6 <_printf_i+0x152>
 8004664:	462a      	mov	r2, r5
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d0ab      	beq.n	80045ca <_printf_i+0x166>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	079b      	lsls	r3, r3, #30
 8004676:	d413      	bmi.n	80046a0 <_printf_i+0x23c>
 8004678:	68e0      	ldr	r0, [r4, #12]
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	4298      	cmp	r0, r3
 800467e:	bfb8      	it	lt
 8004680:	4618      	movlt	r0, r3
 8004682:	e7a4      	b.n	80045ce <_printf_i+0x16a>
 8004684:	2301      	movs	r3, #1
 8004686:	4632      	mov	r2, r6
 8004688:	4649      	mov	r1, r9
 800468a:	4640      	mov	r0, r8
 800468c:	47d0      	blx	sl
 800468e:	3001      	adds	r0, #1
 8004690:	d09b      	beq.n	80045ca <_printf_i+0x166>
 8004692:	3501      	adds	r5, #1
 8004694:	68e3      	ldr	r3, [r4, #12]
 8004696:	9903      	ldr	r1, [sp, #12]
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	42ab      	cmp	r3, r5
 800469c:	dcf2      	bgt.n	8004684 <_printf_i+0x220>
 800469e:	e7eb      	b.n	8004678 <_printf_i+0x214>
 80046a0:	2500      	movs	r5, #0
 80046a2:	f104 0619 	add.w	r6, r4, #25
 80046a6:	e7f5      	b.n	8004694 <_printf_i+0x230>
 80046a8:	08004965 	.word	0x08004965
 80046ac:	08004976 	.word	0x08004976

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	2300      	movs	r3, #0
 80046b4:	4d05      	ldr	r5, [pc, #20]	; (80046cc <_sbrk_r+0x1c>)
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	f7fc fd4a 	bl	8001154 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	20000230 	.word	0x20000230

080046d0 <__sread>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	460c      	mov	r4, r1
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	f000 f8ae 	bl	8004838 <_read_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	bfab      	itete	ge
 80046e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046e2:	89a3      	ldrhlt	r3, [r4, #12]
 80046e4:	181b      	addge	r3, r3, r0
 80046e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ea:	bfac      	ite	ge
 80046ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ee:	81a3      	strhlt	r3, [r4, #12]
 80046f0:	bd10      	pop	{r4, pc}

080046f2 <__swrite>:
 80046f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	461f      	mov	r7, r3
 80046f8:	898b      	ldrh	r3, [r1, #12]
 80046fa:	4605      	mov	r5, r0
 80046fc:	05db      	lsls	r3, r3, #23
 80046fe:	460c      	mov	r4, r1
 8004700:	4616      	mov	r6, r2
 8004702:	d505      	bpl.n	8004710 <__swrite+0x1e>
 8004704:	2302      	movs	r3, #2
 8004706:	2200      	movs	r2, #0
 8004708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470c:	f000 f868 	bl	80047e0 <_lseek_r>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	4632      	mov	r2, r6
 8004714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	4628      	mov	r0, r5
 800471c:	463b      	mov	r3, r7
 800471e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	f000 b817 	b.w	8004758 <_write_r>

0800472a <__sseek>:
 800472a:	b510      	push	{r4, lr}
 800472c:	460c      	mov	r4, r1
 800472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004732:	f000 f855 	bl	80047e0 <_lseek_r>
 8004736:	1c43      	adds	r3, r0, #1
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	bf15      	itete	ne
 800473c:	6560      	strne	r0, [r4, #84]	; 0x54
 800473e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004746:	81a3      	strheq	r3, [r4, #12]
 8004748:	bf18      	it	ne
 800474a:	81a3      	strhne	r3, [r4, #12]
 800474c:	bd10      	pop	{r4, pc}

0800474e <__sclose>:
 800474e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004752:	f000 b813 	b.w	800477c <_close_r>
	...

08004758 <_write_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	2200      	movs	r2, #0
 8004762:	4d05      	ldr	r5, [pc, #20]	; (8004778 <_write_r+0x20>)
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc fca8 	bl	80010bc <_write>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_write_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_write_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000230 	.word	0x20000230

0800477c <_close_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	2300      	movs	r3, #0
 8004780:	4d05      	ldr	r5, [pc, #20]	; (8004798 <_close_r+0x1c>)
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7fc fcb4 	bl	80010f4 <_close>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_close_r+0x1a>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_close_r+0x1a>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	20000230 	.word	0x20000230

0800479c <_fstat_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	2300      	movs	r3, #0
 80047a0:	4d06      	ldr	r5, [pc, #24]	; (80047bc <_fstat_r+0x20>)
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	f7fc fcae 	bl	800110a <_fstat>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d102      	bne.n	80047b8 <_fstat_r+0x1c>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	b103      	cbz	r3, 80047b8 <_fstat_r+0x1c>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd38      	pop	{r3, r4, r5, pc}
 80047ba:	bf00      	nop
 80047bc:	20000230 	.word	0x20000230

080047c0 <_isatty_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	2300      	movs	r3, #0
 80047c4:	4d05      	ldr	r5, [pc, #20]	; (80047dc <_isatty_r+0x1c>)
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc fcac 	bl	8001128 <_isatty>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_isatty_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_isatty_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20000230 	.word	0x20000230

080047e0 <_lseek_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	4d05      	ldr	r5, [pc, #20]	; (8004800 <_lseek_r+0x20>)
 80047ec:	602a      	str	r2, [r5, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f7fc fca4 	bl	800113c <_lseek>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_lseek_r+0x1e>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_lseek_r+0x1e>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	20000230 	.word	0x20000230

08004804 <memchr>:
 8004804:	4603      	mov	r3, r0
 8004806:	b510      	push	{r4, lr}
 8004808:	b2c9      	uxtb	r1, r1
 800480a:	4402      	add	r2, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	4618      	mov	r0, r3
 8004810:	d101      	bne.n	8004816 <memchr+0x12>
 8004812:	2000      	movs	r0, #0
 8004814:	e003      	b.n	800481e <memchr+0x1a>
 8004816:	7804      	ldrb	r4, [r0, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	428c      	cmp	r4, r1
 800481c:	d1f6      	bne.n	800480c <memchr+0x8>
 800481e:	bd10      	pop	{r4, pc}

08004820 <__malloc_lock>:
 8004820:	4801      	ldr	r0, [pc, #4]	; (8004828 <__malloc_lock+0x8>)
 8004822:	f7ff bb13 	b.w	8003e4c <__retarget_lock_acquire_recursive>
 8004826:	bf00      	nop
 8004828:	20000224 	.word	0x20000224

0800482c <__malloc_unlock>:
 800482c:	4801      	ldr	r0, [pc, #4]	; (8004834 <__malloc_unlock+0x8>)
 800482e:	f7ff bb0e 	b.w	8003e4e <__retarget_lock_release_recursive>
 8004832:	bf00      	nop
 8004834:	20000224 	.word	0x20000224

08004838 <_read_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	2200      	movs	r2, #0
 8004842:	4d05      	ldr	r5, [pc, #20]	; (8004858 <_read_r+0x20>)
 8004844:	602a      	str	r2, [r5, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f7fc fc1b 	bl	8001082 <_read>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_read_r+0x1e>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_read_r+0x1e>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20000230 	.word	0x20000230

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
